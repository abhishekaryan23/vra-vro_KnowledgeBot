// ----------findAssociatedProfile----------
var entity = Server.findForType("VC:HostSystem", managedObject.vimHost.id + "/host-21444");
managedObject.findAssociatedProfile(entity);   // HostProfileManager


// ----------queryComplianceStatus----------
var profile = new Array();
profile[0] = Server.findForType("VC:HostProfile", managedObject.vimHost.id + "/hostprofile-1401");
var entity = new Array();
entity[0] = Server.findForType("VC:HostSystem", managedObject.vimHost.id + "/host-21444");
managedObject.queryComplianceStatus(profile, entity);   // ProfileComplianceManager


// ----------queryAnswerFileStatus----------
var host = new Array();
host[0] = Server.findForType("VC:HostSystem", managedObject.vimHost.id + "/host-21444");
managedObject.queryAnswerFileStatus(host);   // HostProfileManager


// ----------retrieveHostCustomizations----------
var hosts = new Array();
hosts[0] = Server.findForType("VC:HostSystem", managedObject.vimHost.id + "/host-21444");
managedObject.retrieveHostCustomizations(hosts);   // HostProfileManager


// ----------generateHostConfigTaskSpec_Task----------
var hostsInfo = new Array();
hostsInfo[0] = new VcStructuredCustomizations();
hostsInfo[0].customizations = new VcAnswerFile();
hostsInfo[0].customizations.modifiedTime = new Date('09/04/2019 12:56:42');
hostsInfo[0].customizations.createdTime = new Date('09/04/2019 12:56:42');
var userInput = new Array();
userInput[0] = new VcProfileDeferredPolicyOptionParameter();
userInput[0].inputPath = new VcProfilePropertyPath();
userInput[0].inputPath.policyId = 'IpAddressPolicy';
userInput[0].inputPath.profilePath = 'network.dvsHostNic["key-vim-profile-host-DvsHostVnicProfile-LIDC_DV_DV_RES_01-LIDC_DV_PV_NBU-ISOLATED_2003-vmk5"].ipConfig';
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = '172.25.242.198';
parameter[0].key = 'address';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '255.255.0.0';
parameter[1].key = 'subnetmask';
userInput[0].parameter = parameter;
userInput[1] = new VcProfileDeferredPolicyOptionParameter();
userInput[1].inputPath = new VcProfilePropertyPath();
userInput[1].inputPath.policyId = 'IpAddressPolicy';
userInput[1].inputPath.profilePath = 'network.dvsHostNic["key-vim-profile-host-DvsHostVnicProfile-LIDC_DV_DV_RES_01-LIDC_DV_PV_NFS_2184-vmk2"].ipConfig';
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = '10.71.102.9';
parameter[0].key = 'address';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '255.255.252.0';
parameter[1].key = 'subnetmask';
userInput[1].parameter = parameter;
userInput[2] = new VcProfileDeferredPolicyOptionParameter();
userInput[2].inputPath = new VcProfilePropertyPath();
userInput[2].inputPath.policyId = 'IpAddressPolicy';
userInput[2].inputPath.profilePath = 'network.dvsHostNic["key-vim-profile-host-DvsHostVnicProfile-LIDC_DV_DV_RES_01-LIDC_DV_PV_VMOTION_2188-vmk1"].ipConfig';
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = '255.255.252.0';
parameter[0].key = 'subnetmask';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '10.71.73.5';
parameter[1].key = 'address';
userInput[2].parameter = parameter;
userInput[3] = new VcProfileDeferredPolicyOptionParameter();
userInput[3].inputPath = new VcProfilePropertyPath();
userInput[3].inputPath.policyId = 'HostNamePolicy';
userInput[3].inputPath.profilePath = 'network.GenericNetStackInstanceProfile["key-vim-profile-host-GenericNetStackInstanceProfile-defaultTcpipStack"].GenericDnsConfigProfile';
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'TC142193';
parameter[0].key = 'hostName';
userInput[3].parameter = parameter;
hostsInfo[0].customizations.userInput = userInput;
hostsInfo[0].entity = Server.findForType("VC:HostSystem", managedObject.vimHost.id + "/host-21444");
managedObject.generateHostConfigTaskSpec_Task(hostsInfo);   // HostProfileManager


// ----------applyEntitiesConfig_Task----------
var applyConfigSpecs = new Array();
applyConfigSpecs[0] = new VcApplyHostProfileConfigurationSpec();
applyConfigSpecs[0].configSpec = new VcHostConfigSpec();
applyConfigSpecs[0].configSpec.datetime = new VcHostDateTimeConfig();
applyConfigSpecs[0].configSpec.datetime.ntpConfig = new VcHostNtpConfig();
var server = new Array();
server[0] = '10.71.20.14';
server[1] = '10.71.20.15';
applyConfigSpecs[0].configSpec.datetime.ntpConfig.server = server;
var nicTypeSelection = new Array();
nicTypeSelection[0] = new VcHostVirtualNicManagerNicTypeSelection();
nicTypeSelection[0].vnic = new VcHostVirtualNicConnection();
nicTypeSelection[0].vnic.dvPort = new VcDistributedVirtualSwitchPortConnection();
nicTypeSelection[0].vnic.dvPort.switchUuid = 'LIDC_DV_DV_RES_01';
nicTypeSelection[0].vnic.dvPort.portgroupKey = 'LIDC_DV_PV_SVCS_2181_CL';
var nicType = new Array();
nicType[0] = 'management';
nicTypeSelection[0].nicType = nicType;
nicTypeSelection[1] = new VcHostVirtualNicManagerNicTypeSelection();
nicTypeSelection[1].vnic = new VcHostVirtualNicConnection();
nicTypeSelection[1].vnic.dvPort = new VcDistributedVirtualSwitchPortConnection();
nicTypeSelection[1].vnic.dvPort.switchUuid = 'LIDC_DV_DV_RES_01';
nicTypeSelection[1].vnic.dvPort.portgroupKey = 'LIDC_DV_PV_VMOTION_2188';
var nicType = new Array();
nicType[0] = 'vmotion';
nicTypeSelection[1].nicType = nicType;
nicTypeSelection[2] = new VcHostVirtualNicManagerNicTypeSelection();
nicTypeSelection[2].vnic = new VcHostVirtualNicConnection();
nicTypeSelection[2].vnic.dvPort = new VcDistributedVirtualSwitchPortConnection();
nicTypeSelection[2].vnic.dvPort.switchUuid = 'LIDC_DV_DV_RES_01';
nicTypeSelection[2].vnic.dvPort.portgroupKey = 'LIDC_DV_PV_NFS_2184';
nicTypeSelection[3] = new VcHostVirtualNicManagerNicTypeSelection();
nicTypeSelection[3].vnic = new VcHostVirtualNicConnection();
nicTypeSelection[3].vnic.dvPort = new VcDistributedVirtualSwitchPortConnection();
nicTypeSelection[3].vnic.dvPort.switchUuid = 'LIDC_DV_DV_RES_01';
nicTypeSelection[3].vnic.dvPort.portgroupKey = 'LIDC_DV_PV_NBU-ISOLATED_2003';
nicTypeSelection[4] = new VcHostVirtualNicManagerNicTypeSelection();
nicTypeSelection[4].vnic = new VcHostVirtualNicConnection();
nicTypeSelection[4].vnic.dvPort = new VcDistributedVirtualSwitchPortConnection();
nicTypeSelection[4].vnic.dvPort.switchUuid = 'LIDC_DV_DV_RES_01';
nicTypeSelection[4].vnic.dvPort.portgroupKey = 'vxw-vmknicPg-dvs-16-2182-ecd39cf0-bb23-4b60-8125-ab80dabc3fd3';
nicTypeSelection[5] = new VcHostVirtualNicManagerNicTypeSelection();
nicTypeSelection[5].vnic = new VcHostVirtualNicConnection();
nicTypeSelection[5].vnic.dvPort = new VcDistributedVirtualSwitchPortConnection();
nicTypeSelection[5].vnic.dvPort.switchUuid = 'LIDC_DV_DV_RES_01';
nicTypeSelection[5].vnic.dvPort.portgroupKey = 'vxw-vmknicPg-dvs-16-2182-ecd39cf0-bb23-4b60-8125-ab80dabc3fd3';
applyConfigSpecs[0].configSpec.nicTypeSelection = nicTypeSelection;
applyConfigSpecs[0].configSpec.firewall = new VcHostFirewallConfig();
applyConfigSpecs[0].configSpec.firewall.defaultBlockingPolicy = new VcHostFirewallDefaultPolicy();
applyConfigSpecs[0].configSpec.firewall.defaultBlockingPolicy.outgoingBlocked = true;
applyConfigSpecs[0].configSpec.firewall.defaultBlockingPolicy.incomingBlocked = true;
var rule = new Array();
rule[0] = new VcHostFirewallConfigRuleSetConfig();
rule[0].allowedHosts = new VcHostFirewallRulesetIpList();
rule[0].allowedHosts.allIp = true;
rule[0].rulesetId = 'CIMHttpServer';
rule[0].enabled = true;
rule[1] = new VcHostFirewallConfigRuleSetConfig();
rule[1].allowedHosts = new VcHostFirewallRulesetIpList();
rule[1].allowedHosts.allIp = true;
rule[1].rulesetId = 'CIMHttpsServer';
rule[1].enabled = true;
rule[2] = new VcHostFirewallConfigRuleSetConfig();
rule[2].allowedHosts = new VcHostFirewallRulesetIpList();
rule[2].allowedHosts.allIp = true;
rule[2].rulesetId = 'CIMSLP';
rule[2].enabled = true;
rule[3] = new VcHostFirewallConfigRuleSetConfig();
rule[3].allowedHosts = new VcHostFirewallRulesetIpList();
rule[3].allowedHosts.allIp = true;
rule[3].rulesetId = 'DHCPv6';
rule[3].enabled = false;
rule[4] = new VcHostFirewallConfigRuleSetConfig();
rule[4].allowedHosts = new VcHostFirewallRulesetIpList();
rule[4].allowedHosts.allIp = true;
rule[4].rulesetId = 'DVFilter';
rule[4].enabled = true;
rule[5] = new VcHostFirewallConfigRuleSetConfig();
rule[5].allowedHosts = new VcHostFirewallRulesetIpList();
rule[5].allowedHosts.allIp = true;
rule[5].rulesetId = 'DVSSync';
rule[5].enabled = true;
rule[6] = new VcHostFirewallConfigRuleSetConfig();
rule[6].allowedHosts = new VcHostFirewallRulesetIpList();
rule[6].allowedHosts.allIp = true;
rule[6].rulesetId = 'HBR';
rule[6].enabled = true;
rule[7] = new VcHostFirewallConfigRuleSetConfig();
rule[7].allowedHosts = new VcHostFirewallRulesetIpList();
rule[7].allowedHosts.allIp = true;
rule[7].rulesetId = 'NFC';
rule[7].enabled = true;
rule[8] = new VcHostFirewallConfigRuleSetConfig();
rule[8].allowedHosts = new VcHostFirewallRulesetIpList();
rule[8].allowedHosts.allIp = true;
rule[8].rulesetId = 'WOL';
rule[8].enabled = true;
rule[9] = new VcHostFirewallConfigRuleSetConfig();
rule[9].allowedHosts = new VcHostFirewallRulesetIpList();
rule[9].allowedHosts.allIp = true;
rule[9].rulesetId = 'activeDirectoryAll';
rule[9].enabled = false;
rule[10] = new VcHostFirewallConfigRuleSetConfig();
rule[10].allowedHosts = new VcHostFirewallRulesetIpList();
rule[10].allowedHosts.allIp = true;
rule[10].rulesetId = 'bfdDP';
rule[10].enabled = true;
rule[11] = new VcHostFirewallConfigRuleSetConfig();
rule[11].allowedHosts = new VcHostFirewallRulesetIpList();
rule[11].allowedHosts.allIp = true;
rule[11].rulesetId = 'dhcp';
rule[11].enabled = true;
rule[12] = new VcHostFirewallConfigRuleSetConfig();
rule[12].allowedHosts = new VcHostFirewallRulesetIpList();
rule[12].allowedHosts.allIp = true;
rule[12].rulesetId = 'dns';
rule[12].enabled = true;
rule[13] = new VcHostFirewallConfigRuleSetConfig();
rule[13].allowedHosts = new VcHostFirewallRulesetIpList();
rule[13].allowedHosts.allIp = true;
rule[13].rulesetId = 'dynamicruleset';
rule[13].enabled = true;
rule[14] = new VcHostFirewallConfigRuleSetConfig();
rule[14].allowedHosts = new VcHostFirewallRulesetIpList();
rule[14].allowedHosts.allIp = true;
rule[14].rulesetId = 'esxupdate';
rule[14].enabled = false;
rule[15] = new VcHostFirewallConfigRuleSetConfig();
rule[15].allowedHosts = new VcHostFirewallRulesetIpList();
rule[15].allowedHosts.allIp = true;
rule[15].rulesetId = 'ftpClient';
rule[15].enabled = false;
rule[16] = new VcHostFirewallConfigRuleSetConfig();
rule[16].allowedHosts = new VcHostFirewallRulesetIpList();
rule[16].allowedHosts.allIp = true;
rule[16].rulesetId = 'gdbserver';
rule[16].enabled = false;
rule[17] = new VcHostFirewallConfigRuleSetConfig();
rule[17].allowedHosts = new VcHostFirewallRulesetIpList();
rule[17].allowedHosts.allIp = true;
rule[17].rulesetId = 'httpClient';
rule[17].enabled = false;
rule[18] = new VcHostFirewallConfigRuleSetConfig();
rule[18].allowedHosts = new VcHostFirewallRulesetIpList();
rule[18].allowedHosts.allIp = true;
rule[18].rulesetId = 'ipfam';
rule[18].enabled = true;
rule[19] = new VcHostFirewallConfigRuleSetConfig();
rule[19].allowedHosts = new VcHostFirewallRulesetIpList();
rule[19].allowedHosts.allIp = true;
rule[19].rulesetId = 'netCP';
rule[19].enabled = true;
rule[20] = new VcHostFirewallConfigRuleSetConfig();
rule[20].allowedHosts = new VcHostFirewallRulesetIpList();
rule[20].allowedHosts.allIp = true;
rule[20].rulesetId = 'nfs41Client';
rule[20].enabled = false;
rule[21] = new VcHostFirewallConfigRuleSetConfig();
rule[21].allowedHosts = new VcHostFirewallRulesetIpList();
rule[21].allowedHosts.allIp = true;
rule[21].rulesetId = 'ntpClient';
rule[21].enabled = true;
rule[22] = new VcHostFirewallConfigRuleSetConfig();
rule[22].allowedHosts = new VcHostFirewallRulesetIpList();
rule[22].allowedHosts.allIp = true;
rule[22].rulesetId = 'pvrdma';
rule[22].enabled = false;
rule[23] = new VcHostFirewallConfigRuleSetConfig();
rule[23].allowedHosts = new VcHostFirewallRulesetIpList();
rule[23].allowedHosts.allIp = true;
rule[23].rulesetId = 'rabbitmqproxy';
rule[23].enabled = true;
rule[24] = new VcHostFirewallConfigRuleSetConfig();
rule[24].allowedHosts = new VcHostFirewallRulesetIpList();
rule[24].allowedHosts.allIp = true;
rule[24].rulesetId = 'remoteSerialPort';
rule[24].enabled = false;
rule[25] = new VcHostFirewallConfigRuleSetConfig();
rule[25].allowedHosts = new VcHostFirewallRulesetIpList();
rule[25].allowedHosts.allIp = true;
rule[25].rulesetId = 'snmp';
rule[25].enabled = true;
rule[26] = new VcHostFirewallConfigRuleSetConfig();
rule[26].allowedHosts = new VcHostFirewallRulesetIpList();
rule[26].allowedHosts.allIp = true;
rule[26].rulesetId = 'sshClient';
rule[26].enabled = true;
rule[27] = new VcHostFirewallConfigRuleSetConfig();
rule[27].allowedHosts = new VcHostFirewallRulesetIpList();
rule[27].allowedHosts.allIp = true;
rule[27].rulesetId = 'sshServer';
rule[27].enabled = true;
rule[28] = new VcHostFirewallConfigRuleSetConfig();
rule[28].allowedHosts = new VcHostFirewallRulesetIpList();
rule[28].allowedHosts.allIp = true;
rule[28].rulesetId = 'syslog';
rule[28].enabled = true;
rule[29] = new VcHostFirewallConfigRuleSetConfig();
rule[29].allowedHosts = new VcHostFirewallRulesetIpList();
rule[29].allowedHosts.allIp = true;
rule[29].rulesetId = 'updateManager';
rule[29].enabled = true;
rule[30] = new VcHostFirewallConfigRuleSetConfig();
rule[30].allowedHosts = new VcHostFirewallRulesetIpList();
rule[30].allowedHosts.allIp = true;
rule[30].rulesetId = 'vMotion';
rule[30].enabled = true;
rule[31] = new VcHostFirewallConfigRuleSetConfig();
rule[31].allowedHosts = new VcHostFirewallRulesetIpList();
rule[31].allowedHosts.allIp = true;
rule[31].rulesetId = 'vSFW-UW';
rule[31].enabled = true;
rule[32] = new VcHostFirewallConfigRuleSetConfig();
rule[32].allowedHosts = new VcHostFirewallRulesetIpList();
rule[32].allowedHosts.allIp = true;
rule[32].rulesetId = 'vSPC';
rule[32].enabled = false;
rule[33] = new VcHostFirewallConfigRuleSetConfig();
rule[33].allowedHosts = new VcHostFirewallRulesetIpList();
rule[33].allowedHosts.allIp = true;
rule[33].rulesetId = 'vSphereClient';
rule[33].enabled = true;
rule[34] = new VcHostFirewallConfigRuleSetConfig();
rule[34].allowedHosts = new VcHostFirewallRulesetIpList();
rule[34].allowedHosts.allIp = true;
rule[34].rulesetId = 'vsanEncryption';
rule[34].enabled = false;
rule[35] = new VcHostFirewallConfigRuleSetConfig();
rule[35].allowedHosts = new VcHostFirewallRulesetIpList();
rule[35].allowedHosts.allIp = true;
rule[35].rulesetId = 'vvold';
rule[35].enabled = false;
rule[36] = new VcHostFirewallConfigRuleSetConfig();
rule[36].allowedHosts = new VcHostFirewallRulesetIpList();
rule[36].allowedHosts.allIp = true;
rule[36].rulesetId = 'webAccess';
rule[36].enabled = true;
applyConfigSpecs[0].configSpec.firewall.rule = rule;
var genericConfig = new Array();
genericConfig[0] = new VcKeyAnyValue();
genericConfig[0].value = new VcHostApplyProfile();
genericConfig[0].value.datetime = new VcDateTimeProfile();
genericConfig[0].value.datetime.profileTypeName = 'DateTimeProfile';
genericConfig[0].value.datetime.profileVersion = '6.5.0';
genericConfig[0].value.datetime.enabled = true;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
var value = new Array();
value[0] = '10.71.20.14';
value[1] = '10.71.20.15';
parameter[0].value = value;
parameter[0].key = 'server';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedNTPOption';
policy[0].id = 'NTPPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'NoDefaultOption';
policy[1].id = 'TimezonePolicy';
genericConfig[0].value.datetime.policy = policy;
genericConfig[0].value.profileTypeName = 'HostApplyProfile';
genericConfig[0].value.firewall = new VcFirewallProfile();
genericConfig[0].value.firewall.profileTypeName = 'FirewallProfile';
genericConfig[0].value.firewall.profileVersion = '6.5.0';
var ruleset = new Array();
ruleset[0] = new VcFirewallProfileRulesetProfile();
ruleset[0].profileTypeName = 'RulesetProfile';
ruleset[0].profileVersion = '6.5.0';
ruleset[0].enabled = true;
ruleset[0].key = 'key-vim-profile-host-RulesetProfile-CIMHttpServer';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'CIMHttpServer';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[0].policy = policy;
ruleset[1] = new VcFirewallProfileRulesetProfile();
ruleset[1].profileTypeName = 'RulesetProfile';
ruleset[1].profileVersion = '6.5.0';
ruleset[1].enabled = true;
ruleset[1].key = 'key-vim-profile-host-RulesetProfile-CIMHttpsServer';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'CIMHttpsServer';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[1].policy = policy;
ruleset[2] = new VcFirewallProfileRulesetProfile();
ruleset[2].profileTypeName = 'RulesetProfile';
ruleset[2].profileVersion = '6.5.0';
ruleset[2].enabled = true;
ruleset[2].key = 'key-vim-profile-host-RulesetProfile-CIMSLP';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'CIMSLP';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[2].policy = policy;
ruleset[3] = new VcFirewallProfileRulesetProfile();
ruleset[3].profileTypeName = 'RulesetProfile';
ruleset[3].profileVersion = '6.5.0';
ruleset[3].enabled = true;
ruleset[3].key = 'key-vim-profile-host-RulesetProfile-DHCPv6';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'DHCPv6';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = false;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[3].policy = policy;
ruleset[4] = new VcFirewallProfileRulesetProfile();
ruleset[4].profileTypeName = 'RulesetProfile';
ruleset[4].profileVersion = '6.5.0';
ruleset[4].enabled = true;
ruleset[4].key = 'key-vim-profile-host-RulesetProfile-DVFilter';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'DVFilter';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[4].policy = policy;
ruleset[5] = new VcFirewallProfileRulesetProfile();
ruleset[5].profileTypeName = 'RulesetProfile';
ruleset[5].profileVersion = '6.5.0';
ruleset[5].enabled = true;
ruleset[5].key = 'key-vim-profile-host-RulesetProfile-DVSSync';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'DVSSync';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[5].policy = policy;
ruleset[6] = new VcFirewallProfileRulesetProfile();
ruleset[6].profileTypeName = 'RulesetProfile';
ruleset[6].profileVersion = '6.5.0';
ruleset[6].enabled = true;
ruleset[6].key = 'key-vim-profile-host-RulesetProfile-HBR';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'HBR';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[6].policy = policy;
ruleset[7] = new VcFirewallProfileRulesetProfile();
ruleset[7].profileTypeName = 'RulesetProfile';
ruleset[7].profileVersion = '6.5.0';
ruleset[7].enabled = true;
ruleset[7].key = 'key-vim-profile-host-RulesetProfile-NFC';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'NFC';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[7].policy = policy;
ruleset[8] = new VcFirewallProfileRulesetProfile();
ruleset[8].profileTypeName = 'RulesetProfile';
ruleset[8].profileVersion = '6.5.0';
ruleset[8].enabled = true;
ruleset[8].key = 'key-vim-profile-host-RulesetProfile-WOL';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'WOL';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[8].policy = policy;
ruleset[9] = new VcFirewallProfileRulesetProfile();
ruleset[9].profileTypeName = 'RulesetProfile';
ruleset[9].profileVersion = '6.5.0';
ruleset[9].enabled = true;
ruleset[9].key = 'key-vim-profile-host-RulesetProfile-activeDirectoryAll';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'activeDirectoryAll';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = false;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[9].policy = policy;
ruleset[10] = new VcFirewallProfileRulesetProfile();
ruleset[10].profileTypeName = 'RulesetProfile';
ruleset[10].profileVersion = '6.5.0';
ruleset[10].enabled = true;
ruleset[10].key = 'key-vim-profile-host-RulesetProfile-bfdDP';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'bfdDP';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[10].policy = policy;
ruleset[11] = new VcFirewallProfileRulesetProfile();
ruleset[11].profileTypeName = 'RulesetProfile';
ruleset[11].profileVersion = '6.5.0';
ruleset[11].enabled = true;
ruleset[11].key = 'key-vim-profile-host-RulesetProfile-dhcp';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'dhcp';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[11].policy = policy;
ruleset[12] = new VcFirewallProfileRulesetProfile();
ruleset[12].profileTypeName = 'RulesetProfile';
ruleset[12].profileVersion = '6.5.0';
ruleset[12].enabled = true;
ruleset[12].key = 'key-vim-profile-host-RulesetProfile-dns';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'dns';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[12].policy = policy;
ruleset[13] = new VcFirewallProfileRulesetProfile();
ruleset[13].profileTypeName = 'RulesetProfile';
ruleset[13].profileVersion = '6.5.0';
ruleset[13].enabled = true;
ruleset[13].key = 'key-vim-profile-host-RulesetProfile-dynamicruleset';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'dynamicruleset';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[13].policy = policy;
ruleset[14] = new VcFirewallProfileRulesetProfile();
ruleset[14].profileTypeName = 'RulesetProfile';
ruleset[14].profileVersion = '6.5.0';
ruleset[14].enabled = true;
ruleset[14].key = 'key-vim-profile-host-RulesetProfile-esxupdate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'esxupdate';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = false;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[14].policy = policy;
ruleset[15] = new VcFirewallProfileRulesetProfile();
ruleset[15].profileTypeName = 'RulesetProfile';
ruleset[15].profileVersion = '6.5.0';
ruleset[15].enabled = true;
ruleset[15].key = 'key-vim-profile-host-RulesetProfile-ftpClient';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'ftpClient';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = false;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[15].policy = policy;
ruleset[16] = new VcFirewallProfileRulesetProfile();
ruleset[16].profileTypeName = 'RulesetProfile';
ruleset[16].profileVersion = '6.5.0';
ruleset[16].enabled = true;
ruleset[16].key = 'key-vim-profile-host-RulesetProfile-gdbserver';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'gdbserver';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = false;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[16].policy = policy;
ruleset[17] = new VcFirewallProfileRulesetProfile();
ruleset[17].profileTypeName = 'RulesetProfile';
ruleset[17].profileVersion = '6.5.0';
ruleset[17].enabled = true;
ruleset[17].key = 'key-vim-profile-host-RulesetProfile-httpClient';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'httpClient';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = false;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[17].policy = policy;
ruleset[18] = new VcFirewallProfileRulesetProfile();
ruleset[18].profileTypeName = 'RulesetProfile';
ruleset[18].profileVersion = '6.5.0';
ruleset[18].enabled = true;
ruleset[18].key = 'key-vim-profile-host-RulesetProfile-ipfam';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'ipfam';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[18].policy = policy;
ruleset[19] = new VcFirewallProfileRulesetProfile();
ruleset[19].profileTypeName = 'RulesetProfile';
ruleset[19].profileVersion = '6.5.0';
ruleset[19].enabled = true;
ruleset[19].key = 'key-vim-profile-host-RulesetProfile-netCP';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'netCP';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[19].policy = policy;
ruleset[20] = new VcFirewallProfileRulesetProfile();
ruleset[20].profileTypeName = 'RulesetProfile';
ruleset[20].profileVersion = '6.5.0';
ruleset[20].enabled = true;
ruleset[20].key = 'key-vim-profile-host-RulesetProfile-nfs41Client';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'nfs41Client';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = false;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[20].policy = policy;
ruleset[21] = new VcFirewallProfileRulesetProfile();
ruleset[21].profileTypeName = 'RulesetProfile';
ruleset[21].profileVersion = '6.5.0';
ruleset[21].enabled = true;
ruleset[21].key = 'key-vim-profile-host-RulesetProfile-ntpClient';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'ntpClient';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[21].policy = policy;
ruleset[22] = new VcFirewallProfileRulesetProfile();
ruleset[22].profileTypeName = 'RulesetProfile';
ruleset[22].profileVersion = '6.5.0';
ruleset[22].enabled = true;
ruleset[22].key = 'key-vim-profile-host-RulesetProfile-pvrdma';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'pvrdma';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = false;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[22].policy = policy;
ruleset[23] = new VcFirewallProfileRulesetProfile();
ruleset[23].profileTypeName = 'RulesetProfile';
ruleset[23].profileVersion = '6.5.0';
ruleset[23].enabled = true;
ruleset[23].key = 'key-vim-profile-host-RulesetProfile-rabbitmqproxy';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'rabbitmqproxy';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[23].policy = policy;
ruleset[24] = new VcFirewallProfileRulesetProfile();
ruleset[24].profileTypeName = 'RulesetProfile';
ruleset[24].profileVersion = '6.5.0';
ruleset[24].enabled = true;
ruleset[24].key = 'key-vim-profile-host-RulesetProfile-remoteSerialPort';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'remoteSerialPort';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = false;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[24].policy = policy;
ruleset[25] = new VcFirewallProfileRulesetProfile();
ruleset[25].profileTypeName = 'RulesetProfile';
ruleset[25].profileVersion = '6.5.0';
ruleset[25].enabled = true;
ruleset[25].key = 'key-vim-profile-host-RulesetProfile-snmp';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'snmp';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[25].policy = policy;
ruleset[26] = new VcFirewallProfileRulesetProfile();
ruleset[26].profileTypeName = 'RulesetProfile';
ruleset[26].profileVersion = '6.5.0';
ruleset[26].enabled = true;
ruleset[26].key = 'key-vim-profile-host-RulesetProfile-sshClient';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'sshClient';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[26].policy = policy;
ruleset[27] = new VcFirewallProfileRulesetProfile();
ruleset[27].profileTypeName = 'RulesetProfile';
ruleset[27].profileVersion = '6.5.0';
ruleset[27].enabled = true;
ruleset[27].key = 'key-vim-profile-host-RulesetProfile-sshServer';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'sshServer';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[27].policy = policy;
ruleset[28] = new VcFirewallProfileRulesetProfile();
ruleset[28].profileTypeName = 'RulesetProfile';
ruleset[28].profileVersion = '6.5.0';
ruleset[28].enabled = true;
ruleset[28].key = 'key-vim-profile-host-RulesetProfile-syslog';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'syslog';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[28].policy = policy;
ruleset[29] = new VcFirewallProfileRulesetProfile();
ruleset[29].profileTypeName = 'RulesetProfile';
ruleset[29].profileVersion = '6.5.0';
ruleset[29].enabled = true;
ruleset[29].key = 'key-vim-profile-host-RulesetProfile-updateManager';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'updateManager';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[29].policy = policy;
ruleset[30] = new VcFirewallProfileRulesetProfile();
ruleset[30].profileTypeName = 'RulesetProfile';
ruleset[30].profileVersion = '6.5.0';
ruleset[30].enabled = true;
ruleset[30].key = 'key-vim-profile-host-RulesetProfile-vMotion';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vMotion';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[30].policy = policy;
ruleset[31] = new VcFirewallProfileRulesetProfile();
ruleset[31].profileTypeName = 'RulesetProfile';
ruleset[31].profileVersion = '6.5.0';
ruleset[31].enabled = true;
ruleset[31].key = 'key-vim-profile-host-RulesetProfile-vSFW-UW';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vSFW-UW';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[31].policy = policy;
ruleset[32] = new VcFirewallProfileRulesetProfile();
ruleset[32].profileTypeName = 'RulesetProfile';
ruleset[32].profileVersion = '6.5.0';
ruleset[32].enabled = true;
ruleset[32].key = 'key-vim-profile-host-RulesetProfile-vSPC';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vSPC';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = false;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[32].policy = policy;
ruleset[33] = new VcFirewallProfileRulesetProfile();
ruleset[33].profileTypeName = 'RulesetProfile';
ruleset[33].profileVersion = '6.5.0';
ruleset[33].enabled = true;
ruleset[33].key = 'key-vim-profile-host-RulesetProfile-vSphereClient';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vSphereClient';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[33].policy = policy;
ruleset[34] = new VcFirewallProfileRulesetProfile();
ruleset[34].profileTypeName = 'RulesetProfile';
ruleset[34].profileVersion = '6.5.0';
ruleset[34].enabled = true;
ruleset[34].key = 'key-vim-profile-host-RulesetProfile-vsanEncryption';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vsanEncryption';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = false;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[34].policy = policy;
ruleset[35] = new VcFirewallProfileRulesetProfile();
ruleset[35].profileTypeName = 'RulesetProfile';
ruleset[35].profileVersion = '6.5.0';
ruleset[35].enabled = true;
ruleset[35].key = 'key-vim-profile-host-RulesetProfile-vvold';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vvold';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = false;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[35].policy = policy;
ruleset[36] = new VcFirewallProfileRulesetProfile();
ruleset[36].profileTypeName = 'RulesetProfile';
ruleset[36].profileVersion = '6.5.0';
ruleset[36].enabled = true;
ruleset[36].key = 'key-vim-profile-host-RulesetProfile-webAccess';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'webAccess';
parameter[0].key = 'rulesetId';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'ruleEnabled';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'allowedAll';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedRulesetOption';
policy[0].id = 'RulesetPolicy';
ruleset[36].policy = policy;
genericConfig[0].value.firewall.ruleset = ruleset;
genericConfig[0].value.firewall.enabled = true;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = true;
parameter[0].key = 'incomingBlocked';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'outgoingBlocked';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedBlockingOption';
policy[0].id = 'DefaultBlockingPolicy';
genericConfig[0].value.firewall.policy = policy;
genericConfig[0].value.profileVersion = '6.5.0';
var property = new Array();
property[0] = new VcProfileApplyProfileProperty();
property[0].array = false;
property[0].propertyName = 'hostSpecConfig_hostSpecConfig_HostSpecConfigProfile';
property[1] = new VcProfileApplyProfileProperty();
property[1].array = false;
property[1].propertyName = 'coredumpFileConfig_coredumpFile_CoredumpFileProfile';
property[2] = new VcProfileApplyProfileProperty();
property[2].array = true;
property[2].propertyName = 'service_serviceProfile_ServiceConfigProfile';
property[3] = new VcProfileApplyProfileProperty();
property[3].array = false;
property[3].propertyName = 'coredumpPartitionConfig_coredumpPartition_CoredumpPartitionProfile';
property[4] = new VcProfileApplyProfileProperty();
property[4].array = false;
property[4].propertyName = 'passwdPAM_passwdPAM_PasswordPAMProfile';
property[5] = new VcProfileApplyProfileProperty();
property[5].array = false;
property[5].propertyName = 'security_SecurityProfile_SecurityConfigProfile';
property[6] = new VcProfileApplyProfileProperty();
property[6].array = false;
property[6].propertyName = 'info_esxInfo_EsxInfo';
property[7] = new VcProfileApplyProfileProperty();
property[7].array = false;
property[7].propertyName = 'keyboardConfig_keyboardProfile_KeyboardProfile';
property[8] = new VcProfileApplyProfileProperty();
property[8].array = false;
property[8].propertyName = 'vmToolsConf_VmToolsConf_VmToolsConfProfile';
property[9] = new VcProfileApplyProfileProperty();
property[9].array = true;
property[9].propertyName = 'sysRPConfig_rpConfigProfile_RPConfigProfile';
property[10] = new VcProfileApplyProfileProperty();
property[10].array = true;
property[10].propertyName = 'hostsFile_hostsFile_EtcHostsProfile';
property[11] = new VcProfileApplyProfileProperty();
property[11].array = true;
property[11].propertyName = 'deviceAlias_deviceAlias_DeviceAliasProfile';
property[12] = new VcProfileApplyProfileProperty();
property[12].array = false;
property[12].propertyName = 'vpxaConfig_vpxaConfig_VpxaConfigProfile';
property[13] = new VcProfileApplyProfileProperty();
property[13].array = false;
property[13].propertyName = 'graphicsConfig_graphicsConfigProfile_GraphicsConfigProfile';
property[14] = new VcProfileApplyProfileProperty();
property[14].array = false;
property[14].propertyName = 'pciPassThru_pciPassThru_PciPassThroughProfile';
property[15] = new VcProfileApplyProfileProperty();
property[15].array = false;
property[15].propertyName = 'vFlashHostCache_vFlashHostCacheConfig_VFlashHostCacheConfigProfile';
property[16] = new VcProfileApplyProfileProperty();
property[16].array = true;
property[16].propertyName = 'hostCache_hostCacheConfig_HostCacheConfigProfile';
property[17] = new VcProfileApplyProfileProperty();
property[17].array = false;
property[17].propertyName = 'kernelModule_moduleProfile_KernelModuleConfigProfile';
property[18] = new VcProfileApplyProfileProperty();
property[18].array = false;
property[18].propertyName = 'systemSwap_systemSwapConfig_SystemSwapConfigProfile';
property[19] = new VcProfileApplyProfileProperty();
property[19].array = false;
property[19].propertyName = 'hostprofileLogging_hpLogging_HPLoggingProfile';
property[20] = new VcProfileApplyProfileProperty();
property[20].array = false;
property[20].propertyName = 'powerSystem_powerSystem_PowerSystemProfile';
property[21] = new VcProfileApplyProfileProperty();
property[21].array = false;
property[21].propertyName = 'snmp_GenericAgentProfiles_GenericAgentConfigProfile';
property[22] = new VcProfileApplyProfileProperty();
property[22].array = false;
property[22].propertyName = 'acceptanceLevel_acceptanceLevel_HostAcceptanceLevelProfile';
property[23] = new VcProfileApplyProfileProperty();
property[23].array = false;
property[23].propertyName = 'sfcbConfig_sfcbConfigProfile_SfcbConfigProfile';
property[24] = new VcProfileApplyProfileProperty();
property[24].array = false;
property[24].propertyName = 'agentVmConfig_agentVmProfile_AgentVmProfile';
property[25] = new VcProfileApplyProfileProperty();
property[25].array = false;
property[25].propertyName = 'systemCache_caching_CachingProfile';
property[26] = new VcProfileApplyProfileProperty();
property[26].array = false;
property[26].propertyName = 'vmwareConfig_vmwareConfig_VmwareConfigProfile';
property[27] = new VcProfileApplyProfileProperty();
property[27].array = false;
property[27].propertyName = 'cimIndications_cimIndicationsProfile_CimIndications';
genericConfig[0].value.property = property;
genericConfig[0].value.storage = new VcStorageProfile();
genericConfig[0].value.storage.profileTypeName = 'StorageProfile';
genericConfig[0].value.storage.profileVersion = '6.5.0';
var nasStorage = new Array();
nasStorage[0] = new VcNasStorageProfile();
nasStorage[0].profileTypeName = 'NasStorageProfile';
nasStorage[0].profileVersion = '6.5.0';
nasStorage[0].enabled = true;
nasStorage[0].key = 'key-vim-profile-host-NasStorageProfile-SVM_LOGS_T2_01_LIDC_DV';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'readWrite';
parameter[0].key = 'accessMode';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'SVM_LOGS_T2_01_LIDC_DV';
parameter[1].key = 'localPath';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = '10.71.100.12';
parameter[2].key = 'remoteHost';
parameter[3] = new VcKeyAnyValue();
parameter[3].value = '/SVM_LOGS_T2_01_LIDC_DV';
parameter[3].key = 'remotePath';
parameter[4] = new VcKeyAnyValue();
var value = new Array();
value[0] = '10.71.100.12';
parameter[4].value = value;
parameter[4].key = 'remoteHostNames';
parameter[5] = new VcKeyAnyValue();
parameter[5].value = '';
parameter[5].key = 'securityType';
parameter[6] = new VcKeyAnyValue();
parameter[6].value = 'NFS';
parameter[6].key = 'type';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedNfsStorageOption';
policy[0].id = 'NasStoragePolicy';
nasStorage[0].policy = policy;
nasStorage[1] = new VcNasStorageProfile();
nasStorage[1].profileTypeName = 'NasStorageProfile';
nasStorage[1].profileVersion = '6.5.0';
nasStorage[1].enabled = true;
nasStorage[1].key = 'key-vim-profile-host-NasStorageProfile-SVM_DATA_T0_03_LIDC_DV';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'readWrite';
parameter[0].key = 'accessMode';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'SVM_DATA_T0_03_LIDC_DV';
parameter[1].key = 'localPath';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = '10.71.100.13';
parameter[2].key = 'remoteHost';
parameter[3] = new VcKeyAnyValue();
parameter[3].value = '/SVM_DATA_T0_03_LIDC_DV';
parameter[3].key = 'remotePath';
parameter[4] = new VcKeyAnyValue();
var value = new Array();
value[0] = '10.71.100.13';
parameter[4].value = value;
parameter[4].key = 'remoteHostNames';
parameter[5] = new VcKeyAnyValue();
parameter[5].value = 'NFS';
parameter[5].key = 'type';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedNfsStorageOption';
policy[0].id = 'NasStoragePolicy';
nasStorage[1].policy = policy;
nasStorage[2] = new VcNasStorageProfile();
nasStorage[2].profileTypeName = 'NasStorageProfile';
nasStorage[2].profileVersion = '6.5.0';
nasStorage[2].enabled = true;
nasStorage[2].key = 'key-vim-profile-host-NasStorageProfile-SVM_DATA_T1_03_LIDC_DV';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'readWrite';
parameter[0].key = 'accessMode';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'SVM_DATA_T1_03_LIDC_DV';
parameter[1].key = 'localPath';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = '10.71.100.1';
parameter[2].key = 'remoteHost';
parameter[3] = new VcKeyAnyValue();
parameter[3].value = '/SVM_DATA_T1_03_LIDC_DV';
parameter[3].key = 'remotePath';
parameter[4] = new VcKeyAnyValue();
var value = new Array();
value[0] = '10.71.100.1';
parameter[4].value = value;
parameter[4].key = 'remoteHostNames';
parameter[5] = new VcKeyAnyValue();
parameter[5].value = 'NFS';
parameter[5].key = 'type';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedNfsStorageOption';
policy[0].id = 'NasStoragePolicy';
nasStorage[2].policy = policy;
nasStorage[3] = new VcNasStorageProfile();
nasStorage[3].profileTypeName = 'NasStorageProfile';
nasStorage[3].profileVersion = '6.5.0';
nasStorage[3].enabled = true;
nasStorage[3].key = 'key-vim-profile-host-NasStorageProfile-SVM_DATA_T2_03_LIDC_DV';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'readWrite';
parameter[0].key = 'accessMode';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'SVM_DATA_T2_03_LIDC_DV';
parameter[1].key = 'localPath';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = '10.71.100.12';
parameter[2].key = 'remoteHost';
parameter[3] = new VcKeyAnyValue();
parameter[3].value = '/SVM_DATA_T2_03_LIDC_DV';
parameter[3].key = 'remotePath';
parameter[4] = new VcKeyAnyValue();
var value = new Array();
value[0] = '10.71.100.12';
parameter[4].value = value;
parameter[4].key = 'remoteHostNames';
parameter[5] = new VcKeyAnyValue();
parameter[5].value = 'NFS';
parameter[5].key = 'type';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedNfsStorageOption';
policy[0].id = 'NasStoragePolicy';
nasStorage[3].policy = policy;
nasStorage[4] = new VcNasStorageProfile();
nasStorage[4].profileTypeName = 'NasStorageProfile';
nasStorage[4].profileVersion = '6.5.0';
nasStorage[4].enabled = true;
nasStorage[4].key = 'key-vim-profile-host-NasStorageProfile-SVM_DATA_T3_03_LIDC_DV';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'readWrite';
parameter[0].key = 'accessMode';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'SVM_DATA_T3_03_LIDC_DV';
parameter[1].key = 'localPath';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = '10.71.100.13';
parameter[2].key = 'remoteHost';
parameter[3] = new VcKeyAnyValue();
parameter[3].value = '/SVM_DATA_T3_03_LIDC_DV';
parameter[3].key = 'remotePath';
parameter[4] = new VcKeyAnyValue();
var value = new Array();
value[0] = '10.71.100.13';
parameter[4].value = value;
parameter[4].key = 'remoteHostNames';
parameter[5] = new VcKeyAnyValue();
parameter[5].value = 'NFS';
parameter[5].key = 'type';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedNfsStorageOption';
policy[0].id = 'NasStoragePolicy';
nasStorage[4].policy = policy;
genericConfig[0].value.storage.nasStorage = nasStorage;
var property = new Array();
property[0] = new VcProfileApplyProfileProperty();
property[0].array = false;
property[0].propertyName = 'psa_psaProfile_PluggableStorageArchitectureProfile';
property[1] = new VcProfileApplyProfileProperty();
property[1].array = false;
property[1].propertyName = 'iscsi_iscsiProfile_IscsiInitiatorProfile';
property[2] = new VcProfileApplyProfileProperty();
property[2].array = false;
property[2].propertyName = 'vsan_vsanProfiles_VSANProfile';
property[3] = new VcProfileApplyProfileProperty();
property[3].array = false;
property[3].propertyName = 'fcoe_fcoeProfiles_FCoEProfile';
property[4] = new VcProfileApplyProfileProperty();
property[4].array = false;
property[4].propertyName = 'vvol_vvolProfile_VirtualVolumesProfile';
property[5] = new VcProfileApplyProfileProperty();
property[5].array = false;
property[5].propertyName = 'nmp_nmpProfile_NativeMultiPathingProfile';
property[6] = new VcProfileApplyProfileProperty();
property[6].array = false;
property[6].propertyName = 'nfs_nfsUser_NfsUserProfile';
genericConfig[0].value.storage.property = property;
genericConfig[0].value.storage.enabled = true;
genericConfig[0].value.enabled = true;
genericConfig[0].value.authentication = new VcAuthenticationProfile();
genericConfig[0].value.authentication.profileTypeName = 'AuthenticationProfile';
genericConfig[0].value.authentication.profileVersion = '6.5.0';
genericConfig[0].value.authentication.activeDirectory = new VcActiveDirectoryProfile();
genericConfig[0].value.authentication.activeDirectory.profileTypeName = 'ActiveDirectoryProfile';
genericConfig[0].value.authentication.activeDirectory.profileVersion = '6.5.0';
genericConfig[0].value.authentication.activeDirectory.enabled = true;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
policy[0].policyOption.id = 'DomainNotSetOption';
policy[0].id = 'JoinedDomainPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'NoDefaultOption';
policy[1].id = 'JoinDomainMethodPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = false;
parameter[0].key = 'enabled';
policy[2].policyOption.parameter = parameter;
policy[2].policyOption.id = 'SmartCardAuthenticationOption';
policy[2].id = 'SmartCardAuthenticationPolicy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
policy[3].policyOption.id = 'SmartCardTrustAnchors';
policy[3].id = 'SmartCardTrustAnchorPolicy';
genericConfig[0].value.authentication.activeDirectory.policy = policy;
genericConfig[0].value.authentication.enabled = true;
genericConfig[0].value.network = new VcNetworkProfile();
var vswitch = new Array();
vswitch[0] = new VcVirtualSwitchProfile();
vswitch[0].profileTypeName = 'VirtualSwitchProfile';
vswitch[0].profileVersion = '6.5.0';
vswitch[0].networkPolicy = new VcNetworkPolicyProfile();
vswitch[0].networkPolicy.profileTypeName = 'NetworkPolicyProfile';
vswitch[0].networkPolicy.profileVersion = '6.5.0';
vswitch[0].networkPolicy.enabled = true;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = false;
parameter[0].key = 'allowPromiscuous';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'forgedTransmits';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'macChanges';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'NewFixedSecurityPolicyOption';
policy[0].id = 'NetworkSecurityPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = false;
parameter[0].key = 'enabled';
policy[1].policyOption.parameter = parameter;
policy[1].policyOption.id = 'NewFixedTrafficShapingPolicyOption';
policy[1].id = 'NetworkTrafficShapingPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = true;
parameter[0].key = 'notifySwitches';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'loadbalance_srcid';
parameter[1].key = 'policy';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = true;
parameter[2].key = 'reversePolicy';
parameter[3] = new VcKeyAnyValue();
parameter[3].value = false;
parameter[3].key = 'rollingOrder';
policy[2].policyOption.parameter = parameter;
policy[2].policyOption.id = 'FixedNicTeamingPolicyOption';
policy[2].id = 'NetworkNicTeamingPolicy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
policy[3].policyOption.id = 'FixedNicOrdering';
policy[3].id = 'NetworkNicOrderPolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = false;
parameter[0].key = 'checkBeacon';
policy[4].policyOption.parameter = parameter;
policy[4].policyOption.id = 'NewFixedFailoverCriteria';
policy[4].id = 'NetworkFailoverPolicy';
vswitch[0].networkPolicy.policy = policy;
vswitch[0].link = new VcLinkProfile();
vswitch[0].link.profileTypeName = 'LinkProfile';
vswitch[0].link.profileVersion = '6.5.0';
vswitch[0].link.enabled = true;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
policy[0].policyOption.id = 'PnicsByName';
policy[0].id = 'LinkSpecPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'NoDefaultOption';
policy[1].id = 'BeaconConfigPolicy';
vswitch[0].link.policy = policy;
vswitch[0].name = 'vSwitch0';
vswitch[0].numPorts = new VcNumPortsProfile();
vswitch[0].numPorts.profileTypeName = 'NumPortsProfile';
vswitch[0].numPorts.profileVersion = '6.5.0';
vswitch[0].numPorts.enabled = true;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 128;
parameter[0].key = 'numPorts';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedNumPorts';
policy[0].id = 'NumPortsPolicy';
vswitch[0].numPorts.policy = policy;
vswitch[0].enabled = true;
vswitch[0].key = 'key-vim-profile-host-VirtualSwitchProfile-vSwitch0';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
policy[0].policyOption.id = 'CreateAlways';
policy[0].id = 'VirtualSwitchCreatePolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 1500;
parameter[0].key = 'mtu';
policy[1].policyOption.parameter = parameter;
policy[1].policyOption.id = 'FixedMtuOption';
policy[1].id = 'MtuPolicy';
vswitch[0].policy = policy;
genericConfig[0].value.network.vswitch = vswitch;
genericConfig[0].value.network.profileTypeName = 'NetworkProfile';
var dvswitch = new Array();
dvswitch[0] = new VcDvsProfile();
dvswitch[0].profileTypeName = 'DvsProfile';
dvswitch[0].profileVersion = '6.5.0';
var uplink = new Array();
uplink[0] = new VcPnicUplinkProfile();
uplink[0].profileTypeName = 'PnicUplinkProfile';
uplink[0].profileVersion = '6.5.0';
uplink[0].enabled = true;
uplink[0].key = 'key-vim-profile-host-PnicUplinkProfile-vmnic0-LIDC_DV_UL_RES_01-Uplink1';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
var value = new Array();
value[0] = 'vmnic0';
parameter[0].value = value;
parameter[0].key = 'nicNames';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'PnicsByName';
policy[0].id = 'SingularPnicPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Uplink 1';
parameter[0].key = 'uplinkPort';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'LIDC_DV_UL_RES_01';
parameter[1].key = 'uplinkPortgroup';
policy[1].policyOption.parameter = parameter;
policy[1].policyOption.id = 'FixedUplinkPortgroupOption';
policy[1].id = 'DvsUplinkPortPolicy';
uplink[0].policy = policy;
uplink[1] = new VcPnicUplinkProfile();
uplink[1].profileTypeName = 'PnicUplinkProfile';
uplink[1].profileVersion = '6.5.0';
uplink[1].enabled = true;
uplink[1].key = 'key-vim-profile-host-PnicUplinkProfile-vmnic1-LIDC_DV_UL_RES_01-Uplink2';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
var value = new Array();
value[0] = 'vmnic1';
parameter[0].value = value;
parameter[0].key = 'nicNames';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'PnicsByName';
policy[0].id = 'SingularPnicPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Uplink 2';
parameter[0].key = 'uplinkPort';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'LIDC_DV_UL_RES_01';
parameter[1].key = 'uplinkPortgroup';
policy[1].policyOption.parameter = parameter;
policy[1].policyOption.id = 'FixedUplinkPortgroupOption';
policy[1].id = 'DvsUplinkPortPolicy';
uplink[1].policy = policy;
dvswitch[0].uplink = uplink;
dvswitch[0].name = 'LIDC_DV_DV_RES_01';
dvswitch[0].enabled = true;
dvswitch[0].key = 'key-vim-profile-host-DvsProfile-LIDC_DV_DV_RES_01';
genericConfig[0].value.network.dvswitch = dvswitch;
genericConfig[0].value.network.profileVersion = '6.5.0';
var dvsHostNic = new Array();
dvsHostNic[0] = new VcDvsHostVNicProfile();
dvsHostNic[0].ipConfig = new VcIpAddressProfile();
dvsHostNic[0].ipConfig.profileTypeName = 'IpAddressProfile';
dvsHostNic[0].ipConfig.profileVersion = '6.5.0';
dvsHostNic[0].ipConfig.enabled = true;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
policy[0].policyOption.id = 'FixedDhcpOption';
policy[0].id = 'IpAddressPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'NoDefaultOption';
policy[1].id = 'StatelessAutoconfPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
policy[2].policyOption.id = 'NoDefaultOption';
policy[2].id = 'FixedDhcp6Policy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
policy[3].policyOption.id = 'NoDefaultOption';
policy[3].id = 'Ip6AddressPolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
policy[4].policyOption.id = 'NoDefaultOption';
policy[4].id = 'VnicIpRouteDefaultGatewayPolicy';
policy[5] = new VcProfilePolicy();
policy[5].policyOption = new VcPolicyOption();
policy[5].policyOption.id = 'NoDefaultOption';
policy[5].id = 'VnicIpRouteDefaultGateway6Policy';
dvsHostNic[0].ipConfig.policy = policy;
dvsHostNic[0].profileTypeName = 'DvsHostVNicProfile';
dvsHostNic[0].profileVersion = '6.5.0';
dvsHostNic[0].enabled = true;
dvsHostNic[0].key = 'key-vim-profile-host-DvsHostVnicProfile-LIDC_DV_DV_RES_01-LIDC_DV_PV_SVCS_2181_CL-vmk0';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'LIDC_DV_DV_RES_01';
parameter[0].key = 'dvsName';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'LIDC_DV_PV_SVCS_2181_CL';
parameter[1].key = 'portgroupName';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedDVPortgroupSelectionOption';
policy[0].id = 'DvsPortSelectionPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'CreateAlways';
policy[1].id = 'DvsVnicCreationPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmnic0,vmnic1';
parameter[0].key = 'activeUplinks';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'loadbalance_srcmac';
parameter[1].key = 'policy';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = '';
parameter[2].key = 'standbyUplinks';
parameter[3] = new VcKeyAnyValue();
parameter[3].value = 0;
parameter[3].key = 'vlanId';
policy[2].policyOption.parameter = parameter;
policy[2].policyOption.id = 'VmknicDefaultEarlyBootOption';
policy[2].id = 'DvsEarlyBootVnicPolicy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
var value = new Array();
value[0] = 'management';
parameter[0].value = value;
parameter[0].key = 'nicType';
policy[3].policyOption.parameter = parameter;
policy[3].policyOption.id = 'FixedNICTypeOption';
policy[3].id = 'VirtualNICTypePolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
policy[4].policyOption.id = 'NetworkDeviceMacAddress';
policy[4].id = 'MacAddressPolicy';
policy[5] = new VcProfilePolicy();
policy[5].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmk0';
parameter[0].key = 'vmkNicName';
policy[5].policyOption.parameter = parameter;
policy[5].policyOption.id = 'FixedVirtualNICNameOption';
policy[5].id = 'VirtualNICNamePolicy';
policy[6] = new VcProfilePolicy();
policy[6].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 9000;
parameter[0].key = 'mtu';
policy[6].policyOption.parameter = parameter;
policy[6].policyOption.id = 'FixedMtuOption';
policy[6].id = 'MtuPolicy';
policy[7] = new VcProfilePolicy();
policy[7].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'defaultTcpipStack';
parameter[0].key = 'instanceName';
policy[7].policyOption.parameter = parameter;
policy[7].policyOption.id = 'FixedVirtualNICInstanceOption';
policy[7].id = 'VirtualNICInstancePolicy';
dvsHostNic[0].policy = policy;
dvsHostNic[1] = new VcDvsHostVNicProfile();
dvsHostNic[1].ipConfig = new VcIpAddressProfile();
dvsHostNic[1].ipConfig.profileTypeName = 'IpAddressProfile';
dvsHostNic[1].ipConfig.profileVersion = '6.5.0';
dvsHostNic[1].ipConfig.enabled = true;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = '10.71.73.5';
parameter[0].key = 'address';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '255.255.252.0';
parameter[1].key = 'subnetmask';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'UserInputIPAddress';
policy[0].id = 'IpAddressPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'NoDefaultOption';
policy[1].id = 'StatelessAutoconfPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
policy[2].policyOption.id = 'NoDefaultOption';
policy[2].id = 'FixedDhcp6Policy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
policy[3].policyOption.id = 'NoDefaultOption';
policy[3].id = 'Ip6AddressPolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
policy[4].policyOption.id = 'NoDefaultOption';
policy[4].id = 'VnicIpRouteDefaultGatewayPolicy';
policy[5] = new VcProfilePolicy();
policy[5].policyOption = new VcPolicyOption();
policy[5].policyOption.id = 'NoDefaultOption';
policy[5].id = 'VnicIpRouteDefaultGateway6Policy';
dvsHostNic[1].ipConfig.policy = policy;
dvsHostNic[1].profileTypeName = 'DvsHostVNicProfile';
dvsHostNic[1].profileVersion = '6.5.0';
dvsHostNic[1].enabled = true;
dvsHostNic[1].key = 'key-vim-profile-host-DvsHostVnicProfile-LIDC_DV_DV_RES_01-LIDC_DV_PV_VMOTION_2188-vmk1';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'LIDC_DV_DV_RES_01';
parameter[0].key = 'dvsName';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'LIDC_DV_PV_VMOTION_2188';
parameter[1].key = 'portgroupName';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedDVPortgroupSelectionOption';
policy[0].id = 'DvsPortSelectionPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'CreateAlways';
policy[1].id = 'DvsVnicCreationPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmnic0,vmnic1';
parameter[0].key = 'activeUplinks';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'loadbalance_srcmac';
parameter[1].key = 'policy';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = '';
parameter[2].key = 'standbyUplinks';
parameter[3] = new VcKeyAnyValue();
parameter[3].value = 2188;
parameter[3].key = 'vlanId';
policy[2].policyOption.parameter = parameter;
policy[2].policyOption.id = 'VmknicDefaultEarlyBootOption';
policy[2].id = 'DvsEarlyBootVnicPolicy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
var value = new Array();
value[0] = 'vmotion';
parameter[0].value = value;
parameter[0].key = 'nicType';
policy[3].policyOption.parameter = parameter;
policy[3].policyOption.id = 'FixedNICTypeOption';
policy[3].id = 'VirtualNICTypePolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
policy[4].policyOption.id = 'NoDefaultOption';
policy[4].id = 'MacAddressPolicy';
policy[5] = new VcProfilePolicy();
policy[5].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmk1';
parameter[0].key = 'vmkNicName';
policy[5].policyOption.parameter = parameter;
policy[5].policyOption.id = 'FixedVirtualNICNameOption';
policy[5].id = 'VirtualNICNamePolicy';
policy[6] = new VcProfilePolicy();
policy[6].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 9000;
parameter[0].key = 'mtu';
policy[6].policyOption.parameter = parameter;
policy[6].policyOption.id = 'FixedMtuOption';
policy[6].id = 'MtuPolicy';
policy[7] = new VcProfilePolicy();
policy[7].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'defaultTcpipStack';
parameter[0].key = 'instanceName';
policy[7].policyOption.parameter = parameter;
policy[7].policyOption.id = 'FixedVirtualNICInstanceOption';
policy[7].id = 'VirtualNICInstancePolicy';
dvsHostNic[1].policy = policy;
dvsHostNic[2] = new VcDvsHostVNicProfile();
dvsHostNic[2].ipConfig = new VcIpAddressProfile();
dvsHostNic[2].ipConfig.profileTypeName = 'IpAddressProfile';
dvsHostNic[2].ipConfig.profileVersion = '6.5.0';
dvsHostNic[2].ipConfig.enabled = true;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = '10.71.102.9';
parameter[0].key = 'address';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '255.255.252.0';
parameter[1].key = 'subnetmask';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'UserInputIPAddress';
policy[0].id = 'IpAddressPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'NoDefaultOption';
policy[1].id = 'StatelessAutoconfPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
policy[2].policyOption.id = 'NoDefaultOption';
policy[2].id = 'FixedDhcp6Policy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
policy[3].policyOption.id = 'NoDefaultOption';
policy[3].id = 'Ip6AddressPolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
policy[4].policyOption.id = 'NoDefaultOption';
policy[4].id = 'VnicIpRouteDefaultGatewayPolicy';
policy[5] = new VcProfilePolicy();
policy[5].policyOption = new VcPolicyOption();
policy[5].policyOption.id = 'NoDefaultOption';
policy[5].id = 'VnicIpRouteDefaultGateway6Policy';
dvsHostNic[2].ipConfig.policy = policy;
dvsHostNic[2].profileTypeName = 'DvsHostVNicProfile';
dvsHostNic[2].profileVersion = '6.5.0';
dvsHostNic[2].enabled = true;
dvsHostNic[2].key = 'key-vim-profile-host-DvsHostVnicProfile-LIDC_DV_DV_RES_01-LIDC_DV_PV_NFS_2184-vmk2';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'LIDC_DV_DV_RES_01';
parameter[0].key = 'dvsName';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'LIDC_DV_PV_NFS_2184';
parameter[1].key = 'portgroupName';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedDVPortgroupSelectionOption';
policy[0].id = 'DvsPortSelectionPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'CreateAlways';
policy[1].id = 'DvsVnicCreationPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmnic0,vmnic1';
parameter[0].key = 'activeUplinks';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'loadbalance_srcmac';
parameter[1].key = 'policy';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = '';
parameter[2].key = 'standbyUplinks';
parameter[3] = new VcKeyAnyValue();
parameter[3].value = 2184;
parameter[3].key = 'vlanId';
policy[2].policyOption.parameter = parameter;
policy[2].policyOption.id = 'VmknicDefaultEarlyBootOption';
policy[2].id = 'DvsEarlyBootVnicPolicy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
policy[3].policyOption.id = 'FixedNICTypeOption';
policy[3].id = 'VirtualNICTypePolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
policy[4].policyOption.id = 'NoDefaultOption';
policy[4].id = 'MacAddressPolicy';
policy[5] = new VcProfilePolicy();
policy[5].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmk2';
parameter[0].key = 'vmkNicName';
policy[5].policyOption.parameter = parameter;
policy[5].policyOption.id = 'FixedVirtualNICNameOption';
policy[5].id = 'VirtualNICNamePolicy';
policy[6] = new VcProfilePolicy();
policy[6].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 9000;
parameter[0].key = 'mtu';
policy[6].policyOption.parameter = parameter;
policy[6].policyOption.id = 'FixedMtuOption';
policy[6].id = 'MtuPolicy';
policy[7] = new VcProfilePolicy();
policy[7].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'defaultTcpipStack';
parameter[0].key = 'instanceName';
policy[7].policyOption.parameter = parameter;
policy[7].policyOption.id = 'FixedVirtualNICInstanceOption';
policy[7].id = 'VirtualNICInstancePolicy';
dvsHostNic[2].policy = policy;
dvsHostNic[3] = new VcDvsHostVNicProfile();
dvsHostNic[3].ipConfig = new VcIpAddressProfile();
dvsHostNic[3].ipConfig.profileTypeName = 'IpAddressProfile';
dvsHostNic[3].ipConfig.profileVersion = '6.5.0';
dvsHostNic[3].ipConfig.enabled = true;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = '172.25.242.198';
parameter[0].key = 'address';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '255.255.0.0';
parameter[1].key = 'subnetmask';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'UserInputIPAddress';
policy[0].id = 'IpAddressPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'NoDefaultOption';
policy[1].id = 'StatelessAutoconfPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
policy[2].policyOption.id = 'NoDefaultOption';
policy[2].id = 'FixedDhcp6Policy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
policy[3].policyOption.id = 'NoDefaultOption';
policy[3].id = 'Ip6AddressPolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
policy[4].policyOption.id = 'NoDefaultOption';
policy[4].id = 'VnicIpRouteDefaultGatewayPolicy';
policy[5] = new VcProfilePolicy();
policy[5].policyOption = new VcPolicyOption();
policy[5].policyOption.id = 'NoDefaultOption';
policy[5].id = 'VnicIpRouteDefaultGateway6Policy';
dvsHostNic[3].ipConfig.policy = policy;
dvsHostNic[3].profileTypeName = 'DvsHostVNicProfile';
dvsHostNic[3].profileVersion = '6.5.0';
dvsHostNic[3].enabled = true;
dvsHostNic[3].key = 'key-vim-profile-host-DvsHostVnicProfile-LIDC_DV_DV_RES_01-LIDC_DV_PV_NBU-ISOLATED_2003-vmk5';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'LIDC_DV_DV_RES_01';
parameter[0].key = 'dvsName';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'LIDC_DV_PV_NBU-ISOLATED_2003';
parameter[1].key = 'portgroupName';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedDVPortgroupSelectionOption';
policy[0].id = 'DvsPortSelectionPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'CreateAlways';
policy[1].id = 'DvsVnicCreationPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmnic0,vmnic1';
parameter[0].key = 'activeUplinks';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'loadbalance_srcmac';
parameter[1].key = 'policy';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = '';
parameter[2].key = 'standbyUplinks';
parameter[3] = new VcKeyAnyValue();
parameter[3].value = 2003;
parameter[3].key = 'vlanId';
policy[2].policyOption.parameter = parameter;
policy[2].policyOption.id = 'VmknicDefaultEarlyBootOption';
policy[2].id = 'DvsEarlyBootVnicPolicy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
policy[3].policyOption.id = 'FixedNICTypeOption';
policy[3].id = 'VirtualNICTypePolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
policy[4].policyOption.id = 'NoDefaultOption';
policy[4].id = 'MacAddressPolicy';
policy[5] = new VcProfilePolicy();
policy[5].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmk5';
parameter[0].key = 'vmkNicName';
policy[5].policyOption.parameter = parameter;
policy[5].policyOption.id = 'FixedVirtualNICNameOption';
policy[5].id = 'VirtualNICNamePolicy';
policy[6] = new VcProfilePolicy();
policy[6].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 9000;
parameter[0].key = 'mtu';
policy[6].policyOption.parameter = parameter;
policy[6].policyOption.id = 'FixedMtuOption';
policy[6].id = 'MtuPolicy';
policy[7] = new VcProfilePolicy();
policy[7].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'defaultTcpipStack';
parameter[0].key = 'instanceName';
policy[7].policyOption.parameter = parameter;
policy[7].policyOption.id = 'FixedVirtualNICInstanceOption';
policy[7].id = 'VirtualNICInstancePolicy';
dvsHostNic[3].policy = policy;
dvsHostNic[4] = new VcDvsHostVNicProfile();
dvsHostNic[4].ipConfig = new VcIpAddressProfile();
dvsHostNic[4].ipConfig.profileTypeName = 'IpAddressProfile';
dvsHostNic[4].ipConfig.profileVersion = '6.5.0';
dvsHostNic[4].ipConfig.enabled = false;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
policy[0].policyOption.id = 'FixedDhcpOption';
policy[0].id = 'IpAddressPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'NoDefaultOption';
policy[1].id = 'StatelessAutoconfPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
policy[2].policyOption.id = 'NoDefaultOption';
policy[2].id = 'FixedDhcp6Policy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
policy[3].policyOption.id = 'NoDefaultOption';
policy[3].id = 'Ip6AddressPolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
policy[4].policyOption.id = 'NoDefaultOption';
policy[4].id = 'VnicIpRouteDefaultGatewayPolicy';
policy[5] = new VcProfilePolicy();
policy[5].policyOption = new VcPolicyOption();
policy[5].policyOption.id = 'NoDefaultOption';
policy[5].id = 'VnicIpRouteDefaultGateway6Policy';
dvsHostNic[4].ipConfig.policy = policy;
dvsHostNic[4].profileTypeName = 'DvsHostVNicProfile';
dvsHostNic[4].profileVersion = '6.5.0';
dvsHostNic[4].enabled = false;
dvsHostNic[4].key = 'key-vim-profile-host-DvsHostVnicProfile-LIDC_DV_DV_RES_01-vxw-vmknicPg-dvs-16-2182-ecd39cf0-bb23-4b60-8125-ab80dabc3fd3-vmk3';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'LIDC_DV_DV_RES_01';
parameter[0].key = 'dvsName';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'vxw-vmknicPg-dvs-16-2182-ecd39cf0-bb23-4b60-8125-ab80dabc3fd3';
parameter[1].key = 'portgroupName';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedDVPortgroupSelectionOption';
policy[0].id = 'DvsPortSelectionPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'CreateAlways';
policy[1].id = 'DvsVnicCreationPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmnic1,vmnic0';
parameter[0].key = 'activeUplinks';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'loadbalance_srcmac';
parameter[1].key = 'policy';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = '';
parameter[2].key = 'standbyUplinks';
parameter[3] = new VcKeyAnyValue();
parameter[3].value = 2182;
parameter[3].key = 'vlanId';
policy[2].policyOption.parameter = parameter;
policy[2].policyOption.id = 'VmknicDefaultEarlyBootOption';
policy[2].id = 'DvsEarlyBootVnicPolicy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
policy[3].policyOption.id = 'FixedNICTypeOption';
policy[3].id = 'VirtualNICTypePolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
policy[4].policyOption.id = 'NoDefaultOption';
policy[4].id = 'MacAddressPolicy';
policy[5] = new VcProfilePolicy();
policy[5].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmk3';
parameter[0].key = 'vmkNicName';
policy[5].policyOption.parameter = parameter;
policy[5].policyOption.id = 'FixedVirtualNICNameOption';
policy[5].id = 'VirtualNICNamePolicy';
policy[6] = new VcProfilePolicy();
policy[6].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 9000;
parameter[0].key = 'mtu';
policy[6].policyOption.parameter = parameter;
policy[6].policyOption.id = 'FixedMtuOption';
policy[6].id = 'MtuPolicy';
policy[7] = new VcProfilePolicy();
policy[7].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vxlan';
parameter[0].key = 'instanceName';
policy[7].policyOption.parameter = parameter;
policy[7].policyOption.id = 'FixedVirtualNICInstanceOption';
policy[7].id = 'VirtualNICInstancePolicy';
dvsHostNic[4].policy = policy;
dvsHostNic[5] = new VcDvsHostVNicProfile();
dvsHostNic[5].ipConfig = new VcIpAddressProfile();
dvsHostNic[5].ipConfig.profileTypeName = 'IpAddressProfile';
dvsHostNic[5].ipConfig.profileVersion = '6.5.0';
dvsHostNic[5].ipConfig.enabled = false;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
policy[0].policyOption.id = 'FixedDhcpOption';
policy[0].id = 'IpAddressPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'NoDefaultOption';
policy[1].id = 'StatelessAutoconfPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
policy[2].policyOption.id = 'NoDefaultOption';
policy[2].id = 'FixedDhcp6Policy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
policy[3].policyOption.id = 'NoDefaultOption';
policy[3].id = 'Ip6AddressPolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
policy[4].policyOption.id = 'NoDefaultOption';
policy[4].id = 'VnicIpRouteDefaultGatewayPolicy';
policy[5] = new VcProfilePolicy();
policy[5].policyOption = new VcPolicyOption();
policy[5].policyOption.id = 'NoDefaultOption';
policy[5].id = 'VnicIpRouteDefaultGateway6Policy';
dvsHostNic[5].ipConfig.policy = policy;
dvsHostNic[5].profileTypeName = 'DvsHostVNicProfile';
dvsHostNic[5].profileVersion = '6.5.0';
dvsHostNic[5].enabled = false;
dvsHostNic[5].key = 'key-vim-profile-host-DvsHostVnicProfile-LIDC_DV_DV_RES_01-vxw-vmknicPg-dvs-16-2182-ecd39cf0-bb23-4b60-8125-ab80dabc3fd3-vmk4';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'LIDC_DV_DV_RES_01';
parameter[0].key = 'dvsName';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'vxw-vmknicPg-dvs-16-2182-ecd39cf0-bb23-4b60-8125-ab80dabc3fd3';
parameter[1].key = 'portgroupName';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedDVPortgroupSelectionOption';
policy[0].id = 'DvsPortSelectionPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'CreateAlways';
policy[1].id = 'DvsVnicCreationPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmnic1,vmnic0';
parameter[0].key = 'activeUplinks';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'loadbalance_srcmac';
parameter[1].key = 'policy';
parameter[2] = new VcKeyAnyValue();
parameter[2].value = '';
parameter[2].key = 'standbyUplinks';
parameter[3] = new VcKeyAnyValue();
parameter[3].value = 2182;
parameter[3].key = 'vlanId';
policy[2].policyOption.parameter = parameter;
policy[2].policyOption.id = 'VmknicDefaultEarlyBootOption';
policy[2].id = 'DvsEarlyBootVnicPolicy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
policy[3].policyOption.id = 'FixedNICTypeOption';
policy[3].id = 'VirtualNICTypePolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
policy[4].policyOption.id = 'NoDefaultOption';
policy[4].id = 'MacAddressPolicy';
policy[5] = new VcProfilePolicy();
policy[5].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmk4';
parameter[0].key = 'vmkNicName';
policy[5].policyOption.parameter = parameter;
policy[5].policyOption.id = 'FixedVirtualNICNameOption';
policy[5].id = 'VirtualNICNamePolicy';
policy[6] = new VcProfilePolicy();
policy[6].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 9000;
parameter[0].key = 'mtu';
policy[6].policyOption.parameter = parameter;
policy[6].policyOption.id = 'FixedMtuOption';
policy[6].id = 'MtuPolicy';
policy[7] = new VcProfilePolicy();
policy[7].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vxlan';
parameter[0].key = 'instanceName';
policy[7].policyOption.parameter = parameter;
policy[7].policyOption.id = 'FixedVirtualNICInstanceOption';
policy[7].id = 'VirtualNICInstancePolicy';
dvsHostNic[5].policy = policy;
genericConfig[0].value.network.dvsHostNic = dvsHostNic;
var property = new Array();
property[0] = new VcProfileApplyProfileProperty();
property[0].array = true;
property[0].propertyName = 'GenericNetStackInstanceProfile';
property[1] = new VcProfileApplyProfileProperty();
property[1].array = false;
property[1].propertyName = 'netdumpConfig_netdump_NetdumpProfile';
genericConfig[0].value.network.property = property;
var pnic = new Array();
pnic[0] = new VcPhysicalNicProfile();
pnic[0].profileTypeName = 'PhysicalNicProfile';
pnic[0].profileVersion = '6.5.0';
pnic[0].enabled = true;
pnic[0].key = 'key-vim-profile-host-PNicProfile-vmnic0';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmnic0';
parameter[0].key = 'device';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'AutoNegotiateDuplexity';
policy[0].id = 'PhysicalNicDuplexityPolicy';
pnic[0].policy = policy;
pnic[1] = new VcPhysicalNicProfile();
pnic[1].profileTypeName = 'PhysicalNicProfile';
pnic[1].profileVersion = '6.5.0';
pnic[1].enabled = true;
pnic[1].key = 'key-vim-profile-host-PNicProfile-vmnic1';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vmnic1';
parameter[0].key = 'device';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'AutoNegotiateDuplexity';
policy[0].id = 'PhysicalNicDuplexityPolicy';
pnic[1].policy = policy;
genericConfig[0].value.network.pnic = pnic;
var vmPortGroup = new Array();
vmPortGroup[0] = new VcVmPortGroupProfile();
vmPortGroup[0].vswitch = new VcVirtualSwitchSelectionProfile();
vmPortGroup[0].vswitch.profileTypeName = 'VirtualSwitchSelectionProfile';
vmPortGroup[0].vswitch.profileVersion = '6.5.0';
vmPortGroup[0].vswitch.enabled = true;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'vSwitch0';
parameter[0].key = 'vswitchName';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedVswitchSelectionOption';
policy[0].id = 'VswitchSelectionPolicy';
vmPortGroup[0].vswitch.policy = policy;
vmPortGroup[0].profileTypeName = 'VmPortGroupProfile';
vmPortGroup[0].vlan = new VcVlanProfile();
vmPortGroup[0].vlan.profileTypeName = 'VlanProfile';
vmPortGroup[0].vlan.profileVersion = '6.5.0';
vmPortGroup[0].vlan.enabled = true;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 0;
parameter[0].key = 'vlanId';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedVlanIdOption';
policy[0].id = 'VlanIdPolicy';
vmPortGroup[0].vlan.policy = policy;
vmPortGroup[0].profileVersion = '6.5.0';
vmPortGroup[0].networkPolicy = new VcNetworkPolicyProfile();
vmPortGroup[0].networkPolicy.profileTypeName = 'NetworkPolicyProfile';
vmPortGroup[0].networkPolicy.profileVersion = '6.5.0';
vmPortGroup[0].networkPolicy.enabled = true;
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
policy[0].policyOption.id = 'NewFixedSecurityPolicyOption';
policy[0].id = 'NetworkSecurityPolicy';
policy[1] = new VcProfilePolicy();
policy[1].policyOption = new VcPolicyOption();
policy[1].policyOption.id = 'NewFixedTrafficShapingPolicyOption';
policy[1].id = 'NetworkTrafficShapingPolicy';
policy[2] = new VcProfilePolicy();
policy[2].policyOption = new VcPolicyOption();
policy[2].policyOption.id = 'FixedNicTeamingPolicyOption';
policy[2].id = 'NetworkNicTeamingPolicy';
policy[3] = new VcProfilePolicy();
policy[3].policyOption = new VcPolicyOption();
policy[3].policyOption.id = 'UseDefault';
policy[3].id = 'NetworkNicOrderPolicy';
policy[4] = new VcProfilePolicy();
policy[4].policyOption = new VcPolicyOption();
policy[4].policyOption.id = 'NewFixedFailoverCriteria';
policy[4].id = 'NetworkFailoverPolicy';
vmPortGroup[0].networkPolicy.policy = policy;
vmPortGroup[0].name = 'VM Network';
vmPortGroup[0].enabled = true;
vmPortGroup[0].key = 'key-vim-profile-host-VmPortgroupProfile-VMNetwork';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
policy[0].policyOption.id = 'CreateAlways';
policy[0].id = 'PortgroupCreatePolicy';
vmPortGroup[0].policy = policy;
genericConfig[0].value.network.vmPortGroup = vmPortGroup;
genericConfig[0].value.network.enabled = true;
var option = new Array();
option[0] = new VcOptionProfile();
option[0].profileTypeName = 'OptionProfile';
option[0].profileVersion = '6.5.0';
option[0].enabled = true;
option[0].key = 'key-vim-profile-host-OptionProfile-Syslog_global_logDirUnique';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.global.logDirUnique';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'True';
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[0].policy = policy;
option[1] = new VcOptionProfile();
option[1].profileTypeName = 'OptionProfile';
option[1].profileVersion = '6.5.0';
option[1].enabled = true;
option[1].key = 'key-vim-profile-host-OptionProfile-NFS_MaxQueueDepth';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'NFS.MaxQueueDepth';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '128';
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[1].policy = policy;
option[2] = new VcOptionProfile();
option[2].profileTypeName = 'OptionProfile';
option[2].profileVersion = '6.5.0';
option[2].enabled = true;
option[2].key = 'key-vim-profile-host-OptionProfile-NFS_HeartbeatTimeout';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'NFS.HeartbeatTimeout';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '5';
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[2].policy = policy;
option[3] = new VcOptionProfile();
option[3].profileTypeName = 'OptionProfile';
option[3].profileVersion = '6.5.0';
option[3].enabled = true;
option[3].key = 'key-vim-profile-host-OptionProfile-NFS_HeartbeatFrequency';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'NFS.HeartbeatFrequency';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '12';
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[3].policy = policy;
option[4] = new VcOptionProfile();
option[4].profileTypeName = 'OptionProfile';
option[4].profileVersion = '6.5.0';
option[4].enabled = true;
option[4].key = 'key-vim-profile-host-OptionProfile-NFS_HeartbeatMaxFailures';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'NFS.HeartbeatMaxFailures';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '10';
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[4].policy = policy;
option[5] = new VcOptionProfile();
option[5].profileTypeName = 'OptionProfile';
option[5].profileVersion = '6.5.0';
option[5].enabled = true;
option[5].key = 'key-vim-profile-host-OptionProfile-NFS_MaxVolumes';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'NFS.MaxVolumes';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '256';
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[5].policy = policy;
option[6] = new VcOptionProfile();
option[6].profileTypeName = 'OptionProfile';
option[6].profileVersion = '6.5.0';
option[6].enabled = true;
option[6].key = 'key-vim-profile-host-OptionProfile-Net_TcpipHeapMax';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Net.TcpipHeapMax';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '1536';
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[6].policy = policy;
option[7] = new VcOptionProfile();
option[7].profileTypeName = 'OptionProfile';
option[7].profileVersion = '6.5.0';
option[7].enabled = true;
option[7].key = 'key-vim-profile-host-OptionProfile-Net_TcpipHeapSize';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Net.TcpipHeapSize';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '32';
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[7].policy = policy;
option[8] = new VcOptionProfile();
option[8].profileTypeName = 'OptionProfile';
option[8].profileVersion = '6.5.0';
option[8].enabled = true;
option[8].key = 'key-vim-profile-host-OptionProfile-Config_Etc_motd';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Config.Etc.motd';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'The time and date of this login have been sent to the system logs.

WARNING:
   All commands run on the ESXi shell are logged and may be included in
   support bundles. Do not provide passwords directly on the command line.
   Most tools can prompt for secrets or accept them from standard input.

%1b[00mVMware offers supported, powerful system administration tools.  Please
see www.vmware.com/go/sysadmintools for details.

The ESXi Shell can be disabled by an administrative user. See the
vSphere Security documentation for more information.
';
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[8].policy = policy;
option[9] = new VcOptionProfile();
option[9].profileTypeName = 'OptionProfile';
option[9].profileVersion = '6.5.0';
option[9].enabled = true;
option[9].key = 'key-vim-profile-host-OptionProfile-Misc_LogPort';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Misc.LogPort';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'com1';
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[9].policy = policy;
option[10] = new VcOptionProfile();
option[10].profileTypeName = 'OptionProfile';
option[10].profileVersion = '6.5.0';
option[10].enabled = true;
option[10].key = 'key-vim-profile-host-OptionProfile-RdmFilter_HbaIsShared';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'RdmFilter.HbaIsShared';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[10].policy = policy;
option[11] = new VcOptionProfile();
option[11].profileTypeName = 'OptionProfile';
option[11].profileVersion = '6.5.0';
option[11].enabled = true;
option[11].key = 'key-vim-profile-host-OptionProfile-Syslog_global_defaultRotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.global.defaultRotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[11].policy = policy;
option[12] = new VcOptionProfile();
option[12].profileTypeName = 'OptionProfile';
option[12].profileVersion = '6.5.0';
option[12].enabled = true;
option[12].key = 'key-vim-profile-host-OptionProfile-Syslog_global_defaultSize';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.global.defaultSize';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[12].policy = policy;
option[13] = new VcOptionProfile();
option[13].profileTypeName = 'OptionProfile';
option[13].profileVersion = '6.5.0';
option[13].enabled = true;
option[13].key = 'key-vim-profile-host-OptionProfile-Syslog_global_logDir';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.global.logDir';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '[SVM_LOGS_T2_01_LIDC_DV] LOGS';
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[13].policy = policy;
option[14] = new VcOptionProfile();
option[14].profileTypeName = 'OptionProfile';
option[14].profileVersion = '6.5.0';
option[14].enabled = true;
option[14].key = 'key-vim-profile-host-OptionProfile-Syslog_global_logHost';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.global.logHost';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 'udp://pclidcdvvrli-vip.dv.pc.local:514';
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[14].policy = policy;
option[15] = new VcOptionProfile();
option[15].profileTypeName = 'OptionProfile';
option[15].profileVersion = '6.5.0';
option[15].enabled = true;
option[15].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_Xorg_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.Xorg.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[15].policy = policy;
option[16] = new VcOptionProfile();
option[16].profileTypeName = 'OptionProfile';
option[16].profileVersion = '6.5.0';
option[16].enabled = true;
option[16].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_Xorg_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.Xorg.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[16].policy = policy;
option[17] = new VcOptionProfile();
option[17].profileTypeName = 'OptionProfile';
option[17].profileVersion = '6.5.0';
option[17].enabled = true;
option[17].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_auth_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.auth.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[17].policy = policy;
option[18] = new VcOptionProfile();
option[18].profileTypeName = 'OptionProfile';
option[18].profileVersion = '6.5.0';
option[18].enabled = true;
option[18].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_auth_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.auth.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[18].policy = policy;
option[19] = new VcOptionProfile();
option[19].profileTypeName = 'OptionProfile';
option[19].profileVersion = '6.5.0';
option[19].enabled = true;
option[19].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_clomd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.clomd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[19].policy = policy;
option[20] = new VcOptionProfile();
option[20].profileTypeName = 'OptionProfile';
option[20].profileVersion = '6.5.0';
option[20].enabled = true;
option[20].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_clomd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.clomd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[20].policy = policy;
option[21] = new VcOptionProfile();
option[21].profileTypeName = 'OptionProfile';
option[21].profileVersion = '6.5.0';
option[21].enabled = true;
option[21].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_cmmdsTimeMachine_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.cmmdsTimeMachine.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[21].policy = policy;
option[22] = new VcOptionProfile();
option[22].profileTypeName = 'OptionProfile';
option[22].profileVersion = '6.5.0';
option[22].enabled = true;
option[22].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_cmmdsTimeMachine_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.cmmdsTimeMachine.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[22].policy = policy;
option[23] = new VcOptionProfile();
option[23].profileTypeName = 'OptionProfile';
option[23].profileVersion = '6.5.0';
option[23].enabled = true;
option[23].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_cmmdsTimeMachineDump_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.cmmdsTimeMachineDump.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 20;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[23].policy = policy;
option[24] = new VcOptionProfile();
option[24].profileTypeName = 'OptionProfile';
option[24].profileVersion = '6.5.0';
option[24].enabled = true;
option[24].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_cmmdsTimeMachineDump_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.cmmdsTimeMachineDump.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 10240;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[24].policy = policy;
option[25] = new VcOptionProfile();
option[25].profileTypeName = 'OptionProfile';
option[25].profileVersion = '6.5.0';
option[25].enabled = true;
option[25].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_ddecomd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.ddecomd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[25].policy = policy;
option[26] = new VcOptionProfile();
option[26].profileTypeName = 'OptionProfile';
option[26].profileVersion = '6.5.0';
option[26].enabled = true;
option[26].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_ddecomd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.ddecomd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[26].policy = policy;
option[27] = new VcOptionProfile();
option[27].profileTypeName = 'OptionProfile';
option[27].profileVersion = '6.5.0';
option[27].enabled = true;
option[27].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_dfwpktlogs_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.dfwpktlogs.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 10;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[27].policy = policy;
option[28] = new VcOptionProfile();
option[28].profileTypeName = 'OptionProfile';
option[28].profileVersion = '6.5.0';
option[28].enabled = true;
option[28].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_dfwpktlogs_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.dfwpktlogs.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 10240;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[28].policy = policy;
option[29] = new VcOptionProfile();
option[29].profileTypeName = 'OptionProfile';
option[29].profileVersion = '6.5.0';
option[29].enabled = true;
option[29].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_dhclient_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.dhclient.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[29].policy = policy;
option[30] = new VcOptionProfile();
option[30].profileTypeName = 'OptionProfile';
option[30].profileVersion = '6.5.0';
option[30].enabled = true;
option[30].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_dhclient_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.dhclient.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[30].policy = policy;
option[31] = new VcOptionProfile();
option[31].profileTypeName = 'OptionProfile';
option[31].profileVersion = '6.5.0';
option[31].enabled = true;
option[31].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_epd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.epd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[31].policy = policy;
option[32] = new VcOptionProfile();
option[32].profileTypeName = 'OptionProfile';
option[32].profileVersion = '6.5.0';
option[32].enabled = true;
option[32].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_epd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.epd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[32].policy = policy;
option[33] = new VcOptionProfile();
option[33].profileTypeName = 'OptionProfile';
option[33].profileVersion = '6.5.0';
option[33].enabled = true;
option[33].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_esxupdate_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.esxupdate.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[33].policy = policy;
option[34] = new VcOptionProfile();
option[34].profileTypeName = 'OptionProfile';
option[34].profileVersion = '6.5.0';
option[34].enabled = true;
option[34].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_esxupdate_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.esxupdate.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[34].policy = policy;
option[35] = new VcOptionProfile();
option[35].profileTypeName = 'OptionProfile';
option[35].profileVersion = '6.5.0';
option[35].enabled = true;
option[35].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_fdm_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.fdm.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[35].policy = policy;
option[36] = new VcOptionProfile();
option[36].profileTypeName = 'OptionProfile';
option[36].profileVersion = '6.5.0';
option[36].enabled = true;
option[36].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_fdm_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.fdm.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[36].policy = policy;
option[37] = new VcOptionProfile();
option[37].profileTypeName = 'OptionProfile';
option[37].profileVersion = '6.5.0';
option[37].enabled = true;
option[37].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_hbrca_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.hbrca.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[37].policy = policy;
option[38] = new VcOptionProfile();
option[38].profileTypeName = 'OptionProfile';
option[38].profileVersion = '6.5.0';
option[38].enabled = true;
option[38].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_hbrca_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.hbrca.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[38].policy = policy;
option[39] = new VcOptionProfile();
option[39].profileTypeName = 'OptionProfile';
option[39].profileVersion = '6.5.0';
option[39].enabled = true;
option[39].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_hostd-probe_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.hostd-probe.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[39].policy = policy;
option[40] = new VcOptionProfile();
option[40].profileTypeName = 'OptionProfile';
option[40].profileVersion = '6.5.0';
option[40].enabled = true;
option[40].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_hostd-probe_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.hostd-probe.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[40].policy = policy;
option[41] = new VcOptionProfile();
option[41].profileTypeName = 'OptionProfile';
option[41].profileVersion = '6.5.0';
option[41].enabled = true;
option[41].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_hostd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.hostd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[41].policy = policy;
option[42] = new VcOptionProfile();
option[42].profileTypeName = 'OptionProfile';
option[42].profileVersion = '6.5.0';
option[42].enabled = true;
option[42].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_hostd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.hostd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[42].policy = policy;
option[43] = new VcOptionProfile();
option[43].profileTypeName = 'OptionProfile';
option[43].profileVersion = '6.5.0';
option[43].enabled = true;
option[43].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_hostdCgiServer_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.hostdCgiServer.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[43].policy = policy;
option[44] = new VcOptionProfile();
option[44].profileTypeName = 'OptionProfile';
option[44].profileVersion = '6.5.0';
option[44].enabled = true;
option[44].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_hostdCgiServer_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.hostdCgiServer.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[44].policy = policy;
option[45] = new VcOptionProfile();
option[45].profileTypeName = 'OptionProfile';
option[45].profileVersion = '6.5.0';
option[45].enabled = true;
option[45].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_hostprofiletrace_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.hostprofiletrace.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[45].policy = policy;
option[46] = new VcOptionProfile();
option[46].profileTypeName = 'OptionProfile';
option[46].profileVersion = '6.5.0';
option[46].enabled = true;
option[46].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_hostprofiletrace_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.hostprofiletrace.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[46].policy = policy;
option[47] = new VcOptionProfile();
option[47].profileTypeName = 'OptionProfile';
option[47].profileVersion = '6.5.0';
option[47].enabled = true;
option[47].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_iofiltervpd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.iofiltervpd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[47].policy = policy;
option[48] = new VcOptionProfile();
option[48].profileTypeName = 'OptionProfile';
option[48].profileVersion = '6.5.0';
option[48].enabled = true;
option[48].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_iofiltervpd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.iofiltervpd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[48].policy = policy;
option[49] = new VcOptionProfile();
option[49].profileTypeName = 'OptionProfile';
option[49].profileVersion = '6.5.0';
option[49].enabled = true;
option[49].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_lacp_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.lacp.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[49].policy = policy;
option[50] = new VcOptionProfile();
option[50].profileTypeName = 'OptionProfile';
option[50].profileVersion = '6.5.0';
option[50].enabled = true;
option[50].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_lacp_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.lacp.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[50].policy = policy;
option[51] = new VcOptionProfile();
option[51].profileTypeName = 'OptionProfile';
option[51].profileVersion = '6.5.0';
option[51].enabled = true;
option[51].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_netcpa_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.netcpa.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[51].policy = policy;
option[52] = new VcOptionProfile();
option[52].profileTypeName = 'OptionProfile';
option[52].profileVersion = '6.5.0';
option[52].enabled = true;
option[52].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_netcpa_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.netcpa.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[52].policy = policy;
option[53] = new VcOptionProfile();
option[53].profileTypeName = 'OptionProfile';
option[53].profileVersion = '6.5.0';
option[53].enabled = true;
option[53].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_nfcd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.nfcd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[53].policy = policy;
option[54] = new VcOptionProfile();
option[54].profileTypeName = 'OptionProfile';
option[54].profileVersion = '6.5.0';
option[54].enabled = true;
option[54].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_nfcd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.nfcd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[54].policy = policy;
option[55] = new VcOptionProfile();
option[55].profileTypeName = 'OptionProfile';
option[55].profileVersion = '6.5.0';
option[55].enabled = true;
option[55].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_osfsd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.osfsd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[55].policy = policy;
option[56] = new VcOptionProfile();
option[56].profileTypeName = 'OptionProfile';
option[56].profileVersion = '6.5.0';
option[56].enabled = true;
option[56].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_osfsd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.osfsd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[56].policy = policy;
option[57] = new VcOptionProfile();
option[57].profileTypeName = 'OptionProfile';
option[57].profileVersion = '6.5.0';
option[57].enabled = true;
option[57].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_pktcap-agent_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.pktcap-agent.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[57].policy = policy;
option[58] = new VcOptionProfile();
option[58].profileTypeName = 'OptionProfile';
option[58].profileVersion = '6.5.0';
option[58].enabled = true;
option[58].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_pktcap-agent_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.pktcap-agent.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[58].policy = policy;
option[59] = new VcOptionProfile();
option[59].profileTypeName = 'OptionProfile';
option[59].profileVersion = '6.5.0';
option[59].enabled = true;
option[59].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_rabbitmqproxy_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.rabbitmqproxy.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[59].policy = policy;
option[60] = new VcOptionProfile();
option[60].profileTypeName = 'OptionProfile';
option[60].profileVersion = '6.5.0';
option[60].enabled = true;
option[60].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_rabbitmqproxy_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.rabbitmqproxy.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[60].policy = policy;
option[61] = new VcOptionProfile();
option[61].profileTypeName = 'OptionProfile';
option[61].profileVersion = '6.5.0';
option[61].enabled = true;
option[61].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_rhttpproxy_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.rhttpproxy.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[61].policy = policy;
option[62] = new VcOptionProfile();
option[62].profileTypeName = 'OptionProfile';
option[62].profileVersion = '6.5.0';
option[62].enabled = true;
option[62].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_rhttpproxy_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.rhttpproxy.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[62].policy = policy;
option[63] = new VcOptionProfile();
option[63].profileTypeName = 'OptionProfile';
option[63].profileVersion = '6.5.0';
option[63].enabled = true;
option[63].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_sdrsInjector_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.sdrsInjector.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[63].policy = policy;
option[64] = new VcOptionProfile();
option[64].profileTypeName = 'OptionProfile';
option[64].profileVersion = '6.5.0';
option[64].enabled = true;
option[64].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_sdrsInjector_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.sdrsInjector.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[64].policy = policy;
option[65] = new VcOptionProfile();
option[65].profileTypeName = 'OptionProfile';
option[65].profileVersion = '6.5.0';
option[65].enabled = true;
option[65].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_shell_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.shell.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[65].policy = policy;
option[66] = new VcOptionProfile();
option[66].profileTypeName = 'OptionProfile';
option[66].profileVersion = '6.5.0';
option[66].enabled = true;
option[66].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_shell_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.shell.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[66].policy = policy;
option[67] = new VcOptionProfile();
option[67].profileTypeName = 'OptionProfile';
option[67].profileVersion = '6.5.0';
option[67].enabled = true;
option[67].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_storageRM_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.storageRM.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[67].policy = policy;
option[68] = new VcOptionProfile();
option[68].profileTypeName = 'OptionProfile';
option[68].profileVersion = '6.5.0';
option[68].enabled = true;
option[68].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_storageRM_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.storageRM.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[68].policy = policy;
option[69] = new VcOptionProfile();
option[69].profileTypeName = 'OptionProfile';
option[69].profileVersion = '6.5.0';
option[69].enabled = true;
option[69].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_swapobjd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.swapobjd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[69].policy = policy;
option[70] = new VcOptionProfile();
option[70].profileTypeName = 'OptionProfile';
option[70].profileVersion = '6.5.0';
option[70].enabled = true;
option[70].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_swapobjd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.swapobjd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[70].policy = policy;
option[71] = new VcOptionProfile();
option[71].profileTypeName = 'OptionProfile';
option[71].profileVersion = '6.5.0';
option[71].enabled = true;
option[71].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_syslog_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.syslog.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[71].policy = policy;
option[72] = new VcOptionProfile();
option[72].profileTypeName = 'OptionProfile';
option[72].profileVersion = '6.5.0';
option[72].enabled = true;
option[72].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_syslog_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.syslog.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[72].policy = policy;
option[73] = new VcOptionProfile();
option[73].profileTypeName = 'OptionProfile';
option[73].profileVersion = '6.5.0';
option[73].enabled = true;
option[73].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_upitd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.upitd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[73].policy = policy;
option[74] = new VcOptionProfile();
option[74].profileTypeName = 'OptionProfile';
option[74].profileVersion = '6.5.0';
option[74].enabled = true;
option[74].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_upitd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.upitd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[74].policy = policy;
option[75] = new VcOptionProfile();
option[75].profileTypeName = 'OptionProfile';
option[75].profileVersion = '6.5.0';
option[75].enabled = true;
option[75].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_usb_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.usb.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[75].policy = policy;
option[76] = new VcOptionProfile();
option[76].profileTypeName = 'OptionProfile';
option[76].profileVersion = '6.5.0';
option[76].enabled = true;
option[76].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_usb_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.usb.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[76].policy = policy;
option[77] = new VcOptionProfile();
option[77].profileTypeName = 'OptionProfile';
option[77].profileVersion = '6.5.0';
option[77].enabled = true;
option[77].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vdpi_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vdpi.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[77].policy = policy;
option[78] = new VcOptionProfile();
option[78].profileTypeName = 'OptionProfile';
option[78].profileVersion = '6.5.0';
option[78].enabled = true;
option[78].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vdpi_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vdpi.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[78].policy = policy;
option[79] = new VcOptionProfile();
option[79].profileTypeName = 'OptionProfile';
option[79].profileVersion = '6.5.0';
option[79].enabled = true;
option[79].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vitd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vitd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[79].policy = policy;
option[80] = new VcOptionProfile();
option[80].profileTypeName = 'OptionProfile';
option[80].profileVersion = '6.5.0';
option[80].enabled = true;
option[80].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vitd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vitd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 10240;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[80].policy = policy;
option[81] = new VcOptionProfile();
option[81].profileTypeName = 'OptionProfile';
option[81].profileVersion = '6.5.0';
option[81].enabled = true;
option[81].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vmauthd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vmauthd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[81].policy = policy;
option[82] = new VcOptionProfile();
option[82].profileTypeName = 'OptionProfile';
option[82].profileVersion = '6.5.0';
option[82].enabled = true;
option[82].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vmauthd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vmauthd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[82].policy = policy;
option[83] = new VcOptionProfile();
option[83].profileTypeName = 'OptionProfile';
option[83].profileVersion = '6.5.0';
option[83].enabled = true;
option[83].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vmkdevmgr_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vmkdevmgr.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[83].policy = policy;
option[84] = new VcOptionProfile();
option[84].profileTypeName = 'OptionProfile';
option[84].profileVersion = '6.5.0';
option[84].enabled = true;
option[84].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vmkdevmgr_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vmkdevmgr.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[84].policy = policy;
option[85] = new VcOptionProfile();
option[85].profileTypeName = 'OptionProfile';
option[85].profileVersion = '6.5.0';
option[85].enabled = true;
option[85].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vmkernel_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vmkernel.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[85].policy = policy;
option[86] = new VcOptionProfile();
option[86].profileTypeName = 'OptionProfile';
option[86].profileVersion = '6.5.0';
option[86].enabled = true;
option[86].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vmkernel_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vmkernel.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[86].policy = policy;
option[87] = new VcOptionProfile();
option[87].profileTypeName = 'OptionProfile';
option[87].profileVersion = '6.5.0';
option[87].enabled = true;
option[87].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vmkeventd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vmkeventd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[87].policy = policy;
option[88] = new VcOptionProfile();
option[88].profileTypeName = 'OptionProfile';
option[88].profileVersion = '6.5.0';
option[88].enabled = true;
option[88].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vmkeventd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vmkeventd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[88].policy = policy;
option[89] = new VcOptionProfile();
option[89].profileTypeName = 'OptionProfile';
option[89].profileVersion = '6.5.0';
option[89].enabled = true;
option[89].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vmksummary_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vmksummary.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[89].policy = policy;
option[90] = new VcOptionProfile();
option[90].profileTypeName = 'OptionProfile';
option[90].profileVersion = '6.5.0';
option[90].enabled = true;
option[90].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vmksummary_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vmksummary.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[90].policy = policy;
option[91] = new VcOptionProfile();
option[91].profileTypeName = 'OptionProfile';
option[91].profileVersion = '6.5.0';
option[91].enabled = true;
option[91].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vmkwarning_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vmkwarning.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[91].policy = policy;
option[92] = new VcOptionProfile();
option[92].profileTypeName = 'OptionProfile';
option[92].profileVersion = '6.5.0';
option[92].enabled = true;
option[92].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vmkwarning_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vmkwarning.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[92].policy = policy;
option[93] = new VcOptionProfile();
option[93].profileTypeName = 'OptionProfile';
option[93].profileVersion = '6.5.0';
option[93].enabled = true;
option[93].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vobd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vobd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[93].policy = policy;
option[94] = new VcOptionProfile();
option[94].profileTypeName = 'OptionProfile';
option[94].profileVersion = '6.5.0';
option[94].enabled = true;
option[94].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vobd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vobd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[94].policy = policy;
option[95] = new VcOptionProfile();
option[95].profileTypeName = 'OptionProfile';
option[95].profileVersion = '6.5.0';
option[95].enabled = true;
option[95].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vprobe_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vprobe.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[95].policy = policy;
option[96] = new VcOptionProfile();
option[96].profileTypeName = 'OptionProfile';
option[96].profileVersion = '6.5.0';
option[96].enabled = true;
option[96].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vprobe_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vprobe.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[96].policy = policy;
option[97] = new VcOptionProfile();
option[97].profileTypeName = 'OptionProfile';
option[97].profileVersion = '6.5.0';
option[97].enabled = true;
option[97].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vpxa_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vpxa.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[97].policy = policy;
option[98] = new VcOptionProfile();
option[98].profileTypeName = 'OptionProfile';
option[98].profileVersion = '6.5.0';
option[98].enabled = true;
option[98].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vpxa_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vpxa.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[98].policy = policy;
option[99] = new VcOptionProfile();
option[99].profileTypeName = 'OptionProfile';
option[99].profileVersion = '6.5.0';
option[99].enabled = true;
option[99].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vsanSoapServer_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vsanSoapServer.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[99].policy = policy;
option[100] = new VcOptionProfile();
option[100].profileTypeName = 'OptionProfile';
option[100].profileVersion = '6.5.0';
option[100].enabled = true;
option[100].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vsanSoapServer_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vsanSoapServer.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 5120;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[100].policy = policy;
option[101] = new VcOptionProfile();
option[101].profileTypeName = 'OptionProfile';
option[101].profileVersion = '6.5.0';
option[101].enabled = true;
option[101].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vsanmgmt_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vsanmgmt.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[101].policy = policy;
option[102] = new VcOptionProfile();
option[102].profileTypeName = 'OptionProfile';
option[102].profileVersion = '6.5.0';
option[102].enabled = true;
option[102].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vsanmgmt_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vsanmgmt.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 10240;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[102].policy = policy;
option[103] = new VcOptionProfile();
option[103].profileTypeName = 'OptionProfile';
option[103].profileVersion = '6.5.0';
option[103].enabled = true;
option[103].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vsansystem_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vsansystem.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 10;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[103].policy = policy;
option[104] = new VcOptionProfile();
option[104].profileTypeName = 'OptionProfile';
option[104].profileVersion = '6.5.0';
option[104].enabled = true;
option[104].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vsansystem_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vsansystem.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 10240;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[104].policy = policy;
option[105] = new VcOptionProfile();
option[105].profileTypeName = 'OptionProfile';
option[105].profileVersion = '6.5.0';
option[105].enabled = true;
option[105].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vsantraceUrgent_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vsantraceUrgent.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[105].policy = policy;
option[106] = new VcOptionProfile();
option[106].profileTypeName = 'OptionProfile';
option[106].profileVersion = '6.5.0';
option[106].enabled = true;
option[106].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vsantraceUrgent_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vsantraceUrgent.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[106].policy = policy;
option[107] = new VcOptionProfile();
option[107].profileTypeName = 'OptionProfile';
option[107].profileVersion = '6.5.0';
option[107].enabled = true;
option[107].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vsfwd_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vsfwd.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[107].policy = policy;
option[108] = new VcOptionProfile();
option[108].profileTypeName = 'OptionProfile';
option[108].profileVersion = '6.5.0';
option[108].enabled = true;
option[108].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vsfwd_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vsfwd.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1024;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[108].policy = policy;
option[109] = new VcOptionProfile();
option[109].profileTypeName = 'OptionProfile';
option[109].profileVersion = '6.5.0';
option[109].enabled = true;
option[109].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vvold_rotate';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vvold.rotate';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 16;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[109].policy = policy;
option[110] = new VcOptionProfile();
option[110].profileTypeName = 'OptionProfile';
option[110].profileVersion = '6.5.0';
option[110].enabled = true;
option[110].key = 'key-vim-profile-host-OptionProfile-Syslog_loggers_vvold_size';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'Syslog.loggers.vvold.size';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 8192;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[110].policy = policy;
option[111] = new VcOptionProfile();
option[111].profileTypeName = 'OptionProfile';
option[111].profileVersion = '6.5.0';
option[111].enabled = true;
option[111].key = 'key-vim-profile-host-OptionProfile-UserVars_SuppressShellWarning';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'UserVars.SuppressShellWarning';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = 1;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[111].policy = policy;
option[112] = new VcOptionProfile();
option[112].profileTypeName = 'OptionProfile';
option[112].profileVersion = '6.5.0';
option[112].enabled = true;
option[112].key = 'key-vim-profile-host-OptionProfile-VMkernel_Boot_hyperthreadingMitigation';
var policy = new Array();
policy[0] = new VcProfilePolicy();
policy[0].policyOption = new VcPolicyOption();
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'VMkernel.Boot.hyperthreadingMitigation';
parameter[0].key = 'key';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = true;
parameter[1].key = 'value';
policy[0].policyOption.parameter = parameter;
policy[0].policyOption.id = 'FixedConfigOption';
policy[0].id = 'ConfigOptionPolicy';
option[112].policy = policy;
genericConfig[0].value.option = option;
genericConfig[0].key = 'applyProfile';
genericConfig[1] = new VcKeyAnyValue();
genericConfig[1].value = '3c6f626a65637420786d6c6e733a7873693d22687474703a2f2f7777772e77332e6f72672f323030312f584d4c536368656d612d696e7374616e63652220786d6c6e733a7873643d22687474703a2f2f7777772e77332e6f72672f323030312f584d4c536368656d612220786d6c6e733d2275726e3a76696d323522207873693a747970653d2241727261794f66486f73744e6574776f726b436f6e6669674e6574537461636b53706563223e3c486f73744e6574776f726b436f6e6669674e6574537461636b537065633e3c6e6574537461636b496e7374616e63653e3c6b65793e76786c616e3c2f6b65793e3c636f6e67657374696f6e436f6e74726f6c416c676f726974686d3e6e657772656e6f3c2f636f6e67657374696f6e436f6e74726f6c416c676f726974686d3e3c2f6e6574537461636b496e7374616e63653e3c6f7065726174696f6e3e6164643c2f6f7065726174696f6e3e3c2f486f73744e6574776f726b436f6e6669674e6574537461636b537065633e3c486f73744e6574776f726b436f6e6669674e6574537461636b537065633e3c6e6574537461636b496e7374616e63653e3c6b65793e64656661756c745463706970537461636b3c2f6b65793e3c646e73436f6e666967207873693a747970653d22486f7374446e73436f6e66696753706563223e3c646863703e66616c73653c2f646863703e3c686f73744e616d653e54433134323139333c2f686f73744e616d653e3c646f6d61696e4e616d653e64762e70632e6c6f63616c3c2f646f6d61696e4e616d653e3c616464726573733e31302e37312e32302e31343c2f616464726573733e3c616464726573733e31302e37312e32302e31353c2f616464726573733e3c736561726368446f6d61696e3e64762e70632e6c6f63616c3c2f736561726368446f6d61696e3e3c2f646e73436f6e6669673e3c636f6e67657374696f6e436f6e74726f6c416c676f726974686d3e6e657772656e6f3c2f636f6e67657374696f6e436f6e74726f6c416c676f726974686d3e3c2f6e6574537461636b496e7374616e63653e3c6f7065726174696f6e3e6164643c2f6f7065726174696f6e3e3c2f486f73744e6574776f726b436f6e6669674e6574537461636b537065633e3c2f6f626a6563743e';
genericConfig[1].key = 'netStackSpec';
genericConfig[2] = new VcKeyAnyValue();
genericConfig[2].value = '<object xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:vim25" xsi:type="ArrayOfKeyAnyValue"><KeyAnyValue><key>vmk0</key><value xsi:type="xsd:string">defaultTcpipStack</value></KeyAnyValue><KeyAnyValue><key>vmk1</key><value xsi:type="xsd:string">defaultTcpipStack</value></KeyAnyValue><KeyAnyValue><key>vmk2</key><value xsi:type="xsd:string">defaultTcpipStack</value></KeyAnyValue><KeyAnyValue><key>vmk5</key><value xsi:type="xsd:string">defaultTcpipStack</value></KeyAnyValue><KeyAnyValue><key>vmk3</key><value xsi:type="xsd:string">vxlan</value></KeyAnyValue><KeyAnyValue><key>vmk4</key><value xsi:type="xsd:string">vxlan</value></KeyAnyValue></object>';
genericConfig[2].key = 'vnicNetstackInsts';
genericConfig[3] = new VcKeyAnyValue();
genericConfig[3].value = '/tmp/hostprofile.tmp.6mcpid41';
genericConfig[3].key = 'APPLY_HOSTPROFILE_FILE';
genericConfig[4] = new VcKeyAnyValue();
genericConfig[4].value = '/tmp/answerfile.tmp.jeagtvss';
genericConfig[4].key = 'APPLY_ANSWER_FILE';
applyConfigSpecs[0].configSpec.genericConfig = genericConfig;
var nasDatastore = new Array();
nasDatastore[0] = new VcHostNasVolumeConfig();
nasDatastore[0].changeOperation = 'add';
nasDatastore[0].spec = new VcHostNasVolumeSpec();
var remoteHostNames = new Array();
remoteHostNames[0] = '10.71.100.12';
nasDatastore[0].spec.remoteHostNames = remoteHostNames;
nasDatastore[0].spec.remotePath = '/SVM_LOGS_T2_01_LIDC_DV';
nasDatastore[0].spec.remoteHost = '10.71.100.12';
nasDatastore[0].spec.securityType = '';
nasDatastore[0].spec.localPath = 'SVM_LOGS_T2_01_LIDC_DV';
nasDatastore[0].spec.accessMode = 'readWrite';
nasDatastore[0].spec.type = 'NFS';
nasDatastore[1] = new VcHostNasVolumeConfig();
nasDatastore[1].changeOperation = 'add';
nasDatastore[1].spec = new VcHostNasVolumeSpec();
var remoteHostNames = new Array();
remoteHostNames[0] = '10.71.100.13';
nasDatastore[1].spec.remoteHostNames = remoteHostNames;
nasDatastore[1].spec.remotePath = '/SVM_DATA_T0_03_LIDC_DV';
nasDatastore[1].spec.remoteHost = '10.71.100.13';
nasDatastore[1].spec.localPath = 'SVM_DATA_T0_03_LIDC_DV';
nasDatastore[1].spec.accessMode = 'readWrite';
nasDatastore[1].spec.type = 'NFS';
nasDatastore[2] = new VcHostNasVolumeConfig();
nasDatastore[2].changeOperation = 'add';
nasDatastore[2].spec = new VcHostNasVolumeSpec();
var remoteHostNames = new Array();
remoteHostNames[0] = '10.71.100.1';
nasDatastore[2].spec.remoteHostNames = remoteHostNames;
nasDatastore[2].spec.remotePath = '/SVM_DATA_T1_03_LIDC_DV';
nasDatastore[2].spec.remoteHost = '10.71.100.1';
nasDatastore[2].spec.localPath = 'SVM_DATA_T1_03_LIDC_DV';
nasDatastore[2].spec.accessMode = 'readWrite';
nasDatastore[2].spec.type = 'NFS';
nasDatastore[3] = new VcHostNasVolumeConfig();
nasDatastore[3].changeOperation = 'add';
nasDatastore[3].spec = new VcHostNasVolumeSpec();
var remoteHostNames = new Array();
remoteHostNames[0] = '10.71.100.12';
nasDatastore[3].spec.remoteHostNames = remoteHostNames;
nasDatastore[3].spec.remotePath = '/SVM_DATA_T2_03_LIDC_DV';
nasDatastore[3].spec.remoteHost = '10.71.100.12';
nasDatastore[3].spec.localPath = 'SVM_DATA_T2_03_LIDC_DV';
nasDatastore[3].spec.accessMode = 'readWrite';
nasDatastore[3].spec.type = 'NFS';
nasDatastore[4] = new VcHostNasVolumeConfig();
nasDatastore[4].changeOperation = 'add';
nasDatastore[4].spec = new VcHostNasVolumeSpec();
var remoteHostNames = new Array();
remoteHostNames[0] = '10.71.100.13';
nasDatastore[4].spec.remoteHostNames = remoteHostNames;
nasDatastore[4].spec.remotePath = '/SVM_DATA_T3_03_LIDC_DV';
nasDatastore[4].spec.remoteHost = '10.71.100.13';
nasDatastore[4].spec.localPath = 'SVM_DATA_T3_03_LIDC_DV';
nasDatastore[4].spec.accessMode = 'readWrite';
nasDatastore[4].spec.type = 'NFS';
applyConfigSpecs[0].configSpec.nasDatastore = nasDatastore;
var activeDirectory = new Array();
activeDirectory[0] = new VcHostActiveDirectory();
activeDirectory[0].changeOperation = 'remove';
applyConfigSpecs[0].configSpec.activeDirectory = activeDirectory;
applyConfigSpecs[0].configSpec.network = new VcHostNetworkConfig();
var netStackSpec = new Array();
netStackSpec[0] = new VcHostNetworkConfigNetStackSpec();
netStackSpec[0].netStackInstance = new VcHostNetStackInstance();
netStackSpec[0].netStackInstance.congestionControlAlgorithm = 'newreno';
netStackSpec[0].netStackInstance.key = 'vxlan';
netStackSpec[0].operation = 'add';
netStackSpec[1] = new VcHostNetworkConfigNetStackSpec();
netStackSpec[1].netStackInstance = new VcHostNetStackInstance();
netStackSpec[1].netStackInstance.congestionControlAlgorithm = 'newreno';
netStackSpec[1].netStackInstance.dnsConfig = new VcHostDnsConfigSpec();
netStackSpec[1].netStackInstance.dnsConfig.hostName = 'TC142193';
var address = new Array();
address[0] = '10.71.20.14';
address[1] = '10.71.20.15';
netStackSpec[1].netStackInstance.dnsConfig.address = address;
var searchDomain = new Array();
searchDomain[0] = 'dv.pc.local';
netStackSpec[1].netStackInstance.dnsConfig.searchDomain = searchDomain;
netStackSpec[1].netStackInstance.dnsConfig.domainName = 'dv.pc.local';
netStackSpec[1].netStackInstance.dnsConfig.dhcp = false;
netStackSpec[1].netStackInstance.key = 'defaultTcpipStack';
netStackSpec[1].operation = 'add';
applyConfigSpecs[0].configSpec.network.netStackSpec = netStackSpec;
var vswitch = new Array();
vswitch[0] = new VcHostVirtualSwitchConfig();
vswitch[0].name = 'vSwitch0';
vswitch[0].changeOperation = 'add';
vswitch[0].spec = new VcHostVirtualSwitchSpec();
vswitch[0].spec.numPorts = 128;
vswitch[0].spec.mtu = 1500;
vswitch[0].spec.policy = new VcHostNetworkPolicy();
vswitch[0].spec.policy.security = new VcHostNetworkSecurityPolicy();
vswitch[0].spec.policy.security.allowPromiscuous = false;
vswitch[0].spec.policy.security.forgedTransmits = true;
vswitch[0].spec.policy.security.macChanges = true;
vswitch[0].spec.policy.shapingPolicy = new VcHostNetworkTrafficShapingPolicy();
vswitch[0].spec.policy.shapingPolicy.enabled = false;
vswitch[0].spec.policy.nicTeaming = new VcHostNicTeamingPolicy();
vswitch[0].spec.policy.nicTeaming.notifySwitches = true;
vswitch[0].spec.policy.nicTeaming.rollingOrder = false;
vswitch[0].spec.policy.nicTeaming.failureCriteria = new VcHostNicFailureCriteria();
vswitch[0].spec.policy.nicTeaming.failureCriteria.fullDuplex = false;
vswitch[0].spec.policy.nicTeaming.failureCriteria.percentage = 0;
vswitch[0].spec.policy.nicTeaming.failureCriteria.checkErrorPercent = false;
vswitch[0].spec.policy.nicTeaming.failureCriteria.checkDuplex = false;
vswitch[0].spec.policy.nicTeaming.failureCriteria.checkBeacon = false;
vswitch[0].spec.policy.nicTeaming.failureCriteria.speed = 10;
vswitch[0].spec.policy.nicTeaming.failureCriteria.checkSpeed = 'minimum';
vswitch[0].spec.policy.nicTeaming.nicOrder = new VcHostNicOrderPolicy();
vswitch[0].spec.policy.nicTeaming.policy = 'loadbalance_srcid';
vswitch[0].spec.policy.nicTeaming.reversePolicy = true;
applyConfigSpecs[0].configSpec.network.vswitch = vswitch;
var portgroup = new Array();
portgroup[0] = new VcHostPortGroupConfig();
portgroup[0].changeOperation = 'add';
portgroup[0].spec = new VcHostPortGroupSpec();
portgroup[0].spec.vswitchName = 'vSwitch0';
portgroup[0].spec.vlanId = 0;
portgroup[0].spec.name = 'VM Network';
portgroup[0].spec.policy = new VcHostNetworkPolicy();
portgroup[0].spec.policy.security = new VcHostNetworkSecurityPolicy();
portgroup[0].spec.policy.shapingPolicy = new VcHostNetworkTrafficShapingPolicy();
portgroup[0].spec.policy.nicTeaming = new VcHostNicTeamingPolicy();
portgroup[0].spec.policy.nicTeaming.failureCriteria = new VcHostNicFailureCriteria();
applyConfigSpecs[0].configSpec.network.portgroup = portgroup;
var vnic = new Array();
vnic[0] = new VcHostVirtualNicConfig();
vnic[0].portgroup = '';
vnic[0].device = 'vmk0';
vnic[0].changeOperation = 'add';
vnic[0].spec = new VcHostVirtualNicSpec();
vnic[0].spec.portgroup = 'vlanId=0;policy=loadbalance_srcmac;activeUplinks=vmnic0,vmnic1;standbyUplinks=';
vnic[0].spec.ipRouteSpec = new VcHostVirtualNicIpRouteSpec();
vnic[0].spec.ipRouteSpec.ipRouteConfig = new VcHostIpRouteConfig();
vnic[0].spec.ip = new VcHostIpConfig();
vnic[0].spec.ip.dhcp = true;
vnic[0].spec.netStackInstanceKey = 'defaultTcpipStack';
vnic[0].spec.distributedVirtualPort = new VcDistributedVirtualSwitchPortConnection();
vnic[0].spec.distributedVirtualPort.switchUuid = 'LIDC_DV_DV_RES_01';
vnic[0].spec.distributedVirtualPort.portgroupKey = 'LIDC_DV_PV_SVCS_2181_CL';
vnic[0].spec.mac = 'pxe';
vnic[0].spec.mtu = 9000;
vnic[1] = new VcHostVirtualNicConfig();
vnic[1].portgroup = '';
vnic[1].device = 'vmk1';
vnic[1].changeOperation = 'add';
vnic[1].spec = new VcHostVirtualNicSpec();
vnic[1].spec.portgroup = 'vlanId=2188;policy=loadbalance_srcmac;activeUplinks=vmnic0,vmnic1;standbyUplinks=';
vnic[1].spec.ipRouteSpec = new VcHostVirtualNicIpRouteSpec();
vnic[1].spec.ipRouteSpec.ipRouteConfig = new VcHostIpRouteConfig();
vnic[1].spec.ip = new VcHostIpConfig();
vnic[1].spec.ip.ipAddress = '10.71.73.5';
vnic[1].spec.ip.subnetMask = '255.255.252.0';
vnic[1].spec.ip.dhcp = false;
vnic[1].spec.netStackInstanceKey = 'defaultTcpipStack';
vnic[1].spec.distributedVirtualPort = new VcDistributedVirtualSwitchPortConnection();
vnic[1].spec.distributedVirtualPort.switchUuid = 'LIDC_DV_DV_RES_01';
vnic[1].spec.distributedVirtualPort.portgroupKey = 'LIDC_DV_PV_VMOTION_2188';
vnic[1].spec.mtu = 9000;
vnic[2] = new VcHostVirtualNicConfig();
vnic[2].portgroup = '';
vnic[2].device = 'vmk2';
vnic[2].changeOperation = 'add';
vnic[2].spec = new VcHostVirtualNicSpec();
vnic[2].spec.portgroup = 'vlanId=2184;policy=loadbalance_srcmac;activeUplinks=vmnic0,vmnic1;standbyUplinks=';
vnic[2].spec.ipRouteSpec = new VcHostVirtualNicIpRouteSpec();
vnic[2].spec.ipRouteSpec.ipRouteConfig = new VcHostIpRouteConfig();
vnic[2].spec.ip = new VcHostIpConfig();
vnic[2].spec.ip.ipAddress = '10.71.102.9';
vnic[2].spec.ip.subnetMask = '255.255.252.0';
vnic[2].spec.ip.dhcp = false;
vnic[2].spec.netStackInstanceKey = 'defaultTcpipStack';
vnic[2].spec.distributedVirtualPort = new VcDistributedVirtualSwitchPortConnection();
vnic[2].spec.distributedVirtualPort.switchUuid = 'LIDC_DV_DV_RES_01';
vnic[2].spec.distributedVirtualPort.portgroupKey = 'LIDC_DV_PV_NFS_2184';
vnic[2].spec.mtu = 9000;
vnic[3] = new VcHostVirtualNicConfig();
vnic[3].portgroup = '';
vnic[3].device = 'vmk5';
vnic[3].changeOperation = 'add';
vnic[3].spec = new VcHostVirtualNicSpec();
vnic[3].spec.portgroup = 'vlanId=2003;policy=loadbalance_srcmac;activeUplinks=vmnic0,vmnic1;standbyUplinks=';
vnic[3].spec.ipRouteSpec = new VcHostVirtualNicIpRouteSpec();
vnic[3].spec.ipRouteSpec.ipRouteConfig = new VcHostIpRouteConfig();
vnic[3].spec.ip = new VcHostIpConfig();
vnic[3].spec.ip.ipAddress = '172.25.242.198';
vnic[3].spec.ip.subnetMask = '255.255.0.0';
vnic[3].spec.ip.dhcp = false;
vnic[3].spec.netStackInstanceKey = 'defaultTcpipStack';
vnic[3].spec.distributedVirtualPort = new VcDistributedVirtualSwitchPortConnection();
vnic[3].spec.distributedVirtualPort.switchUuid = 'LIDC_DV_DV_RES_01';
vnic[3].spec.distributedVirtualPort.portgroupKey = 'LIDC_DV_PV_NBU-ISOLATED_2003';
vnic[3].spec.mtu = 9000;
vnic[4] = new VcHostVirtualNicConfig();
vnic[4].portgroup = '';
vnic[4].device = 'vmk3';
vnic[4].changeOperation = 'ignore';
vnic[4].spec = new VcHostVirtualNicSpec();
vnic[4].spec.portgroup = 'vlanId=2182;policy=loadbalance_srcmac;activeUplinks=vmnic1,vmnic0;standbyUplinks=';
vnic[4].spec.ipRouteSpec = new VcHostVirtualNicIpRouteSpec();
vnic[4].spec.ipRouteSpec.ipRouteConfig = new VcHostIpRouteConfig();
vnic[4].spec.ip = new VcHostIpConfig();
vnic[4].spec.ip.dhcp = false;
vnic[4].spec.netStackInstanceKey = 'vxlan';
vnic[4].spec.distributedVirtualPort = new VcDistributedVirtualSwitchPortConnection();
vnic[4].spec.distributedVirtualPort.switchUuid = 'LIDC_DV_DV_RES_01';
vnic[4].spec.distributedVirtualPort.portgroupKey = 'vxw-vmknicPg-dvs-16-2182-ecd39cf0-bb23-4b60-8125-ab80dabc3fd3';
vnic[4].spec.mtu = 9000;
vnic[5] = new VcHostVirtualNicConfig();
vnic[5].portgroup = '';
vnic[5].device = 'vmk4';
vnic[5].changeOperation = 'ignore';
vnic[5].spec = new VcHostVirtualNicSpec();
vnic[5].spec.portgroup = 'vlanId=2182;policy=loadbalance_srcmac;activeUplinks=vmnic1,vmnic0;standbyUplinks=';
vnic[5].spec.ipRouteSpec = new VcHostVirtualNicIpRouteSpec();
vnic[5].spec.ipRouteSpec.ipRouteConfig = new VcHostIpRouteConfig();
vnic[5].spec.ip = new VcHostIpConfig();
vnic[5].spec.ip.dhcp = false;
vnic[5].spec.netStackInstanceKey = 'vxlan';
vnic[5].spec.distributedVirtualPort = new VcDistributedVirtualSwitchPortConnection();
vnic[5].spec.distributedVirtualPort.switchUuid = 'LIDC_DV_DV_RES_01';
vnic[5].spec.distributedVirtualPort.portgroupKey = 'vxw-vmknicPg-dvs-16-2182-ecd39cf0-bb23-4b60-8125-ab80dabc3fd3';
vnic[5].spec.mtu = 9000;
applyConfigSpecs[0].configSpec.network.vnic = vnic;
var pnic = new Array();
pnic[0] = new VcPhysicalNicConfig();
pnic[0].device = 'vmnic0';
pnic[0].spec = new VcPhysicalNicSpec();
pnic[1] = new VcPhysicalNicConfig();
pnic[1].device = 'vmnic1';
pnic[1].spec = new VcPhysicalNicSpec();
applyConfigSpecs[0].configSpec.network.pnic = pnic;
var proxySwitch = new Array();
proxySwitch[0] = new VcHostProxySwitchConfig();
proxySwitch[0].uuid = 'LIDC_DV_DV_RES_01';
proxySwitch[0].changeOperation = 'add';
proxySwitch[0].spec = new VcHostProxySwitchSpec();
proxySwitch[0].spec.backing = new VcDistributedVirtualSwitchHostMemberPnicBacking();
var pnicSpec = new Array();
pnicSpec[0] = new VcDistributedVirtualSwitchHostMemberPnicSpec();
pnicSpec[0].pnicDevice = 'vmnic0';
pnicSpec[0].uplinkPortKey = 'Uplink 1';
pnicSpec[0].uplinkPortgroupKey = 'LIDC_DV_UL_RES_01';
pnicSpec[1] = new VcDistributedVirtualSwitchHostMemberPnicSpec();
pnicSpec[1].pnicDevice = 'vmnic1';
pnicSpec[1].uplinkPortKey = 'Uplink 2';
pnicSpec[1].uplinkPortgroupKey = 'LIDC_DV_UL_RES_01';
proxySwitch[0].spec.backing.pnicSpec = pnicSpec;
applyConfigSpecs[0].configSpec.network.proxySwitch = proxySwitch;
var option = new Array();
option[0] = new VcOptionValue();
option[0].value = true;
option[0].key = 'Syslog.global.logDirUnique';
option[1] = new VcOptionValue();
option[1].value = 128;
option[1].key = 'NFS.MaxQueueDepth';
option[2] = new VcOptionValue();
option[2].value = 5;
option[2].key = 'NFS.HeartbeatTimeout';
option[3] = new VcOptionValue();
option[3].value = 12;
option[3].key = 'NFS.HeartbeatFrequency';
option[4] = new VcOptionValue();
option[4].value = 10;
option[4].key = 'NFS.HeartbeatMaxFailures';
option[5] = new VcOptionValue();
option[5].value = 256;
option[5].key = 'NFS.MaxVolumes';
option[6] = new VcOptionValue();
option[6].value = 1536;
option[6].key = 'Net.TcpipHeapMax';
option[7] = new VcOptionValue();
option[7].value = 32;
option[7].key = 'Net.TcpipHeapSize';
option[8] = new VcOptionValue();
option[8].value = 'The time and date of this login have been sent to the system logs.

WARNING:
   All commands run on the ESXi shell are logged and may be included in
   support bundles. Do not provide passwords directly on the command line.
   Most tools can prompt for secrets or accept them from standard input.

%1b[00mVMware offers supported, powerful system administration tools.  Please
see www.vmware.com/go/sysadmintools for details.

The ESXi Shell can be disabled by an administrative user. See the
vSphere Security documentation for more information.
';
option[8].key = 'Config.Etc.motd';
option[9] = new VcOptionValue();
option[9].value = 'com1';
option[9].key = 'Misc.LogPort';
option[10] = new VcOptionValue();
option[10].value = true;
option[10].key = 'RdmFilter.HbaIsShared';
option[11] = new VcOptionValue();
option[11].value = 8;
option[11].key = 'Syslog.global.defaultRotate';
option[12] = new VcOptionValue();
option[12].value = 1024;
option[12].key = 'Syslog.global.defaultSize';
option[13] = new VcOptionValue();
option[13].value = '[SVM_LOGS_T2_01_LIDC_DV] LOGS';
option[13].key = 'Syslog.global.logDir';
option[14] = new VcOptionValue();
option[14].value = 'udp://pclidcdvvrli-vip.dv.pc.local:514';
option[14].key = 'Syslog.global.logHost';
option[15] = new VcOptionValue();
option[15].value = 8;
option[15].key = 'Syslog.loggers.Xorg.rotate';
option[16] = new VcOptionValue();
option[16].value = 1024;
option[16].key = 'Syslog.loggers.Xorg.size';
option[17] = new VcOptionValue();
option[17].value = 8;
option[17].key = 'Syslog.loggers.auth.rotate';
option[18] = new VcOptionValue();
option[18].value = 1024;
option[18].key = 'Syslog.loggers.auth.size';
option[19] = new VcOptionValue();
option[19].value = 8;
option[19].key = 'Syslog.loggers.clomd.rotate';
option[20] = new VcOptionValue();
option[20].value = 1024;
option[20].key = 'Syslog.loggers.clomd.size';
option[21] = new VcOptionValue();
option[21].value = 8;
option[21].key = 'Syslog.loggers.cmmdsTimeMachine.rotate';
option[22] = new VcOptionValue();
option[22].value = 1024;
option[22].key = 'Syslog.loggers.cmmdsTimeMachine.size';
option[23] = new VcOptionValue();
option[23].value = 20;
option[23].key = 'Syslog.loggers.cmmdsTimeMachineDump.rotate';
option[24] = new VcOptionValue();
option[24].value = 10240;
option[24].key = 'Syslog.loggers.cmmdsTimeMachineDump.size';
option[25] = new VcOptionValue();
option[25].value = 8;
option[25].key = 'Syslog.loggers.ddecomd.rotate';
option[26] = new VcOptionValue();
option[26].value = 1024;
option[26].key = 'Syslog.loggers.ddecomd.size';
option[27] = new VcOptionValue();
option[27].value = 10;
option[27].key = 'Syslog.loggers.dfwpktlogs.rotate';
option[28] = new VcOptionValue();
option[28].value = 10240;
option[28].key = 'Syslog.loggers.dfwpktlogs.size';
option[29] = new VcOptionValue();
option[29].value = 8;
option[29].key = 'Syslog.loggers.dhclient.rotate';
option[30] = new VcOptionValue();
option[30].value = 1024;
option[30].key = 'Syslog.loggers.dhclient.size';
option[31] = new VcOptionValue();
option[31].value = 8;
option[31].key = 'Syslog.loggers.epd.rotate';
option[32] = new VcOptionValue();
option[32].value = 1024;
option[32].key = 'Syslog.loggers.epd.size';
option[33] = new VcOptionValue();
option[33].value = 8;
option[33].key = 'Syslog.loggers.esxupdate.rotate';
option[34] = new VcOptionValue();
option[34].value = 1024;
option[34].key = 'Syslog.loggers.esxupdate.size';
option[35] = new VcOptionValue();
option[35].value = 8;
option[35].key = 'Syslog.loggers.fdm.rotate';
option[36] = new VcOptionValue();
option[36].value = 1024;
option[36].key = 'Syslog.loggers.fdm.size';
option[37] = new VcOptionValue();
option[37].value = 8;
option[37].key = 'Syslog.loggers.hbrca.rotate';
option[38] = new VcOptionValue();
option[38].value = 1024;
option[38].key = 'Syslog.loggers.hbrca.size';
option[39] = new VcOptionValue();
option[39].value = 8;
option[39].key = 'Syslog.loggers.hostd-probe.rotate';
option[40] = new VcOptionValue();
option[40].value = 1024;
option[40].key = 'Syslog.loggers.hostd-probe.size';
option[41] = new VcOptionValue();
option[41].value = 8;
option[41].key = 'Syslog.loggers.hostd.rotate';
option[42] = new VcOptionValue();
option[42].value = 1024;
option[42].key = 'Syslog.loggers.hostd.size';
option[43] = new VcOptionValue();
option[43].value = 8;
option[43].key = 'Syslog.loggers.hostdCgiServer.rotate';
option[44] = new VcOptionValue();
option[44].value = 1024;
option[44].key = 'Syslog.loggers.hostdCgiServer.size';
option[45] = new VcOptionValue();
option[45].value = 8;
option[45].key = 'Syslog.loggers.hostprofiletrace.rotate';
option[46] = new VcOptionValue();
option[46].value = 1024;
option[46].key = 'Syslog.loggers.hostprofiletrace.size';
option[47] = new VcOptionValue();
option[47].value = 8;
option[47].key = 'Syslog.loggers.iofiltervpd.rotate';
option[48] = new VcOptionValue();
option[48].value = 1024;
option[48].key = 'Syslog.loggers.iofiltervpd.size';
option[49] = new VcOptionValue();
option[49].value = 8;
option[49].key = 'Syslog.loggers.lacp.rotate';
option[50] = new VcOptionValue();
option[50].value = 1024;
option[50].key = 'Syslog.loggers.lacp.size';
option[51] = new VcOptionValue();
option[51].value = 8;
option[51].key = 'Syslog.loggers.netcpa.rotate';
option[52] = new VcOptionValue();
option[52].value = 1024;
option[52].key = 'Syslog.loggers.netcpa.size';
option[53] = new VcOptionValue();
option[53].value = 8;
option[53].key = 'Syslog.loggers.nfcd.rotate';
option[54] = new VcOptionValue();
option[54].value = 1024;
option[54].key = 'Syslog.loggers.nfcd.size';
option[55] = new VcOptionValue();
option[55].value = 8;
option[55].key = 'Syslog.loggers.osfsd.rotate';
option[56] = new VcOptionValue();
option[56].value = 1024;
option[56].key = 'Syslog.loggers.osfsd.size';
option[57] = new VcOptionValue();
option[57].value = 8;
option[57].key = 'Syslog.loggers.pktcap-agent.rotate';
option[58] = new VcOptionValue();
option[58].value = 1024;
option[58].key = 'Syslog.loggers.pktcap-agent.size';
option[59] = new VcOptionValue();
option[59].value = 8;
option[59].key = 'Syslog.loggers.rabbitmqproxy.rotate';
option[60] = new VcOptionValue();
option[60].value = 1024;
option[60].key = 'Syslog.loggers.rabbitmqproxy.size';
option[61] = new VcOptionValue();
option[61].value = 8;
option[61].key = 'Syslog.loggers.rhttpproxy.rotate';
option[62] = new VcOptionValue();
option[62].value = 1024;
option[62].key = 'Syslog.loggers.rhttpproxy.size';
option[63] = new VcOptionValue();
option[63].value = 8;
option[63].key = 'Syslog.loggers.sdrsInjector.rotate';
option[64] = new VcOptionValue();
option[64].value = 1024;
option[64].key = 'Syslog.loggers.sdrsInjector.size';
option[65] = new VcOptionValue();
option[65].value = 8;
option[65].key = 'Syslog.loggers.shell.rotate';
option[66] = new VcOptionValue();
option[66].value = 1024;
option[66].key = 'Syslog.loggers.shell.size';
option[67] = new VcOptionValue();
option[67].value = 8;
option[67].key = 'Syslog.loggers.storageRM.rotate';
option[68] = new VcOptionValue();
option[68].value = 1024;
option[68].key = 'Syslog.loggers.storageRM.size';
option[69] = new VcOptionValue();
option[69].value = 8;
option[69].key = 'Syslog.loggers.swapobjd.rotate';
option[70] = new VcOptionValue();
option[70].value = 1024;
option[70].key = 'Syslog.loggers.swapobjd.size';
option[71] = new VcOptionValue();
option[71].value = 8;
option[71].key = 'Syslog.loggers.syslog.rotate';
option[72] = new VcOptionValue();
option[72].value = 1024;
option[72].key = 'Syslog.loggers.syslog.size';
option[73] = new VcOptionValue();
option[73].value = 8;
option[73].key = 'Syslog.loggers.upitd.rotate';
option[74] = new VcOptionValue();
option[74].value = 1024;
option[74].key = 'Syslog.loggers.upitd.size';
option[75] = new VcOptionValue();
option[75].value = 8;
option[75].key = 'Syslog.loggers.usb.rotate';
option[76] = new VcOptionValue();
option[76].value = 1024;
option[76].key = 'Syslog.loggers.usb.size';
option[77] = new VcOptionValue();
option[77].value = 8;
option[77].key = 'Syslog.loggers.vdpi.rotate';
option[78] = new VcOptionValue();
option[78].value = 1024;
option[78].key = 'Syslog.loggers.vdpi.size';
option[79] = new VcOptionValue();
option[79].value = 8;
option[79].key = 'Syslog.loggers.vitd.rotate';
option[80] = new VcOptionValue();
option[80].value = 10240;
option[80].key = 'Syslog.loggers.vitd.size';
option[81] = new VcOptionValue();
option[81].value = 8;
option[81].key = 'Syslog.loggers.vmauthd.rotate';
option[82] = new VcOptionValue();
option[82].value = 1024;
option[82].key = 'Syslog.loggers.vmauthd.size';
option[83] = new VcOptionValue();
option[83].value = 8;
option[83].key = 'Syslog.loggers.vmkdevmgr.rotate';
option[84] = new VcOptionValue();
option[84].value = 1024;
option[84].key = 'Syslog.loggers.vmkdevmgr.size';
option[85] = new VcOptionValue();
option[85].value = 8;
option[85].key = 'Syslog.loggers.vmkernel.rotate';
option[86] = new VcOptionValue();
option[86].value = 1024;
option[86].key = 'Syslog.loggers.vmkernel.size';
option[87] = new VcOptionValue();
option[87].value = 8;
option[87].key = 'Syslog.loggers.vmkeventd.rotate';
option[88] = new VcOptionValue();
option[88].value = 1024;
option[88].key = 'Syslog.loggers.vmkeventd.size';
option[89] = new VcOptionValue();
option[89].value = 8;
option[89].key = 'Syslog.loggers.vmksummary.rotate';
option[90] = new VcOptionValue();
option[90].value = 1024;
option[90].key = 'Syslog.loggers.vmksummary.size';
option[91] = new VcOptionValue();
option[91].value = 8;
option[91].key = 'Syslog.loggers.vmkwarning.rotate';
option[92] = new VcOptionValue();
option[92].value = 1024;
option[92].key = 'Syslog.loggers.vmkwarning.size';
option[93] = new VcOptionValue();
option[93].value = 8;
option[93].key = 'Syslog.loggers.vobd.rotate';
option[94] = new VcOptionValue();
option[94].value = 1024;
option[94].key = 'Syslog.loggers.vobd.size';
option[95] = new VcOptionValue();
option[95].value = 8;
option[95].key = 'Syslog.loggers.vprobe.rotate';
option[96] = new VcOptionValue();
option[96].value = 1024;
option[96].key = 'Syslog.loggers.vprobe.size';
option[97] = new VcOptionValue();
option[97].value = 8;
option[97].key = 'Syslog.loggers.vpxa.rotate';
option[98] = new VcOptionValue();
option[98].value = 1024;
option[98].key = 'Syslog.loggers.vpxa.size';
option[99] = new VcOptionValue();
option[99].value = 8;
option[99].key = 'Syslog.loggers.vsanSoapServer.rotate';
option[100] = new VcOptionValue();
option[100].value = 5120;
option[100].key = 'Syslog.loggers.vsanSoapServer.size';
option[101] = new VcOptionValue();
option[101].value = 8;
option[101].key = 'Syslog.loggers.vsanmgmt.rotate';
option[102] = new VcOptionValue();
option[102].value = 10240;
option[102].key = 'Syslog.loggers.vsanmgmt.size';
option[103] = new VcOptionValue();
option[103].value = 10;
option[103].key = 'Syslog.loggers.vsansystem.rotate';
option[104] = new VcOptionValue();
option[104].value = 10240;
option[104].key = 'Syslog.loggers.vsansystem.size';
option[105] = new VcOptionValue();
option[105].value = 8;
option[105].key = 'Syslog.loggers.vsantraceUrgent.rotate';
option[106] = new VcOptionValue();
option[106].value = 1024;
option[106].key = 'Syslog.loggers.vsantraceUrgent.size';
option[107] = new VcOptionValue();
option[107].value = 8;
option[107].key = 'Syslog.loggers.vsfwd.rotate';
option[108] = new VcOptionValue();
option[108].value = 1024;
option[108].key = 'Syslog.loggers.vsfwd.size';
option[109] = new VcOptionValue();
option[109].value = 16;
option[109].key = 'Syslog.loggers.vvold.rotate';
option[110] = new VcOptionValue();
option[110].value = 8192;
option[110].key = 'Syslog.loggers.vvold.size';
option[111] = new VcOptionValue();
option[111].value = 1;
option[111].key = 'UserVars.SuppressShellWarning';
option[112] = new VcOptionValue();
option[112].value = true;
option[112].key = 'VMkernel.Boot.hyperthreadingMitigation';
applyConfigSpecs[0].configSpec.option = option;
applyConfigSpecs[0].rebootHost = true;
var taskDescription = new Array();
taskDescription[0] = new VcLocalizableMessage();
var arg = new Array();
arg[0] = new VcKeyAnyValue();
arg[0].value = 'vmnic0';
arg[0].key = 'pnicName';
taskDescription[0].arg = arg;
taskDescription[0].message = 'Configure physical network adapter vmnic0 to automatically negotiate the proper settings.';
taskDescription[0].key = 'com.vmware.vim.profile.hostConfigTask.network.pnic.auto.label';
taskDescription[1] = new VcLocalizableMessage();
var arg = new Array();
arg[0] = new VcKeyAnyValue();
arg[0].value = 'vmnic1';
arg[0].key = 'pnicName';
taskDescription[1].arg = arg;
taskDescription[1].message = 'Configure physical network adapter vmnic1 to automatically negotiate the proper settings.';
taskDescription[1].key = 'com.vmware.vim.profile.hostConfigTask.network.pnic.auto.label';
taskDescription[2] = new VcLocalizableMessage();
taskDescription[2].message = 'Update the host profile document in the stateless cache.';
taskDescription[2].key = 'com.vmware.vim.profile.caching.hostprofile.caching.task';
applyConfigSpecs[0].taskDescription = taskDescription;
applyConfigSpecs[0].host = Server.findForType("VC:HostSystem", managedObject.vimHost.id + "/host-21444");
var requireInput = new Array();
requireInput[0] = new VcProfileDeferredPolicyOptionParameter();
requireInput[0].inputPath = new VcProfilePropertyPath();
requireInput[0].inputPath.policyId = 'IpAddressPolicy';
requireInput[0].inputPath.profilePath = 'network.dvsHostNic["key-vim-profile-host-DvsHostVnicProfile-LIDC_DV_DV_RES_01-LIDC_DV_PV_NBU-ISOLATED_2003-vmk5"].ipConfig';
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = '172.25.242.198';
parameter[0].key = 'address';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '255.255.0.0';
parameter[1].key = 'subnetmask';
requireInput[0].parameter = parameter;
requireInput[1] = new VcProfileDeferredPolicyOptionParameter();
requireInput[1].inputPath = new VcProfilePropertyPath();
requireInput[1].inputPath.policyId = 'IpAddressPolicy';
requireInput[1].inputPath.profilePath = 'network.dvsHostNic["key-vim-profile-host-DvsHostVnicProfile-LIDC_DV_DV_RES_01-LIDC_DV_PV_NFS_2184-vmk2"].ipConfig';
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = '10.71.102.9';
parameter[0].key = 'address';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '255.255.252.0';
parameter[1].key = 'subnetmask';
requireInput[1].parameter = parameter;
requireInput[2] = new VcProfileDeferredPolicyOptionParameter();
requireInput[2].inputPath = new VcProfilePropertyPath();
requireInput[2].inputPath.policyId = 'HostNamePolicy';
requireInput[2].inputPath.profilePath = 'network.GenericNetStackInstanceProfile["key-vim-profile-host-GenericNetStackInstanceProfile-defaultTcpipStack"].GenericDnsConfigProfile';
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = 'TC142193';
parameter[0].key = 'hostName';
requireInput[2].parameter = parameter;
requireInput[3] = new VcProfileDeferredPolicyOptionParameter();
requireInput[3].inputPath = new VcProfilePropertyPath();
requireInput[3].inputPath.policyId = 'IpAddressPolicy';
requireInput[3].inputPath.profilePath = 'network.dvsHostNic["key-vim-profile-host-DvsHostVnicProfile-LIDC_DV_DV_RES_01-LIDC_DV_PV_VMOTION_2188-vmk1"].ipConfig';
var parameter = new Array();
parameter[0] = new VcKeyAnyValue();
parameter[0].value = '255.255.252.0';
parameter[0].key = 'subnetmask';
parameter[1] = new VcKeyAnyValue();
parameter[1].value = '10.71.73.5';
parameter[1].key = 'address';
requireInput[3].parameter = parameter;
applyConfigSpecs[0].requireInput = requireInput;
applyConfigSpecs[0].status = 'success';
managedObject.applyEntitiesConfig_Task(applyConfigSpecs);   // HostProfileManager


// ----------findAssociatedProfile----------
var entity = Server.findForType("VC:HostSystem", managedObject.vimHost.id + "/host-21444");
managedObject.findAssociatedProfile(entity);   // HostProfileManager


// ----------findAssociatedProfile----------
var entity = Server.findForType("VC:HostSystem", managedObject.vimHost.id + "/host-21444");
managedObject.findAssociatedProfile(entity);   // HostProfileManager


// ----------queryComplianceStatus----------
var profile = new Array();
profile[0] = Server.findForType("VC:HostProfile", managedObject.vimHost.id + "/hostprofile-1401");
var entity = new Array();
entity[0] = Server.findForType("VC:HostSystem", managedObject.vimHost.id + "/host-21444");
managedObject.queryComplianceStatus(profile, entity);   // ProfileComplianceManager
